Hereâ€™s a complete implementation of Session Cookies + JWT Authentication & Authorization in ASP.NET 7 MVC. This solution ensures:

JWT-based authentication â€“ User logs in and gets a JWT token.
Session-based 'Remember Me' â€“ If enabled, session persists and keeps the user logged in.
Authorization â€“ Only authenticated users can access protected resources like the navbar.
Middleware for JWT handling â€“ Verifies token validity.
Repository & Service Pattern â€“ For clean code separation.

ðŸ”¹ Step 1: Install Required NuGet Packages
Run the following commands in the Package Manager Console:

Install-Package Microsoft.AspNetCore.Authentication.JwtBearer
Install-Package Microsoft.AspNetCore.Mvc.NewtonsoftJson
Install-Package Microsoft.AspNetCore.Session


ðŸ”¹ Step 2: Configure appsettings.json
Add JWT settings for token generation:


{
  "JwtSettings": {
    "SecretKey": "ThisIsASecretKeyForJWTAuthentication123456",
    "Issuer": "MyApp",
    "Audience": "MyUsers",
    "ExpiryMinutes": 60
  },
  "AllowedHosts": "*"
}


ðŸ”¹ Step 3: Configure Middleware in Program.cs
Modify Program.cs to configure Session, JWT, and Authentication:

using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// Enable Session
builder.Services.AddSession(options =>
{
    options.IdleTimeout = TimeSpan.FromMinutes(30); // 30 min session timeout
    options.Cookie.HttpOnly = true;
    options.Cookie.IsEssential = true;
});

// JWT Configuration
var jwtSettings = builder.Configuration.GetSection("JwtSettings");
var key = Encoding.ASCII.GetBytes(jwtSettings["SecretKey"]);

builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.RequireHttpsMetadata = false;
    options.SaveToken = true;
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(key),
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidIssuer = jwtSettings["Issuer"],
        ValidAudience = jwtSettings["Audience"],
        ClockSkew = TimeSpan.Zero
    };
});

builder.Services.AddControllersWithViews();
builder.Services.AddHttpContextAccessor(); // Needed to access HttpContext

var app = builder.Build();

// Middleware setup
app.UseSession();
app.UseAuthentication();
app.UseAuthorization();
app.UseStaticFiles();
app.UseRouting();
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllerRoute(
        name: "default",
        pattern: "{controller=Home}/{action=Index}/{id?}");
});

app.Run();

ðŸ”¹ Step 4: Create AuthService.cs (Service for JWT & Authentication)
Create a service layer in Services/AuthService.cs to handle JWT generation & authentication.


using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using System.Linq;

public class AuthService
{
    private readonly IConfiguration _config;

    public AuthService(IConfiguration config)
    {
        _config = config;
    }

    public string GenerateJwtToken(string username)
    {
        var jwtSettings = _config.GetSection("JwtSettings");
        var key = Encoding.ASCII.GetBytes(jwtSettings["SecretKey"]);

        var tokenHandler = new JwtSecurityTokenHandler();
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Subject = new ClaimsIdentity(new Claim[]
            {
                new Claim(ClaimTypes.Name, username)
            }),
            Expires = DateTime.UtcNow.AddMinutes(int.Parse(jwtSettings["ExpiryMinutes"])),
            Issuer = jwtSettings["Issuer"],
            Audience = jwtSettings["Audience"],
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
        };

        var token = tokenHandler.CreateToken(tokenDescriptor);
        return tokenHandler.WriteToken(token);
    }
}


ðŸ”¹ Step 5: Create AuthController.cs (Login & Logout API)
Handles Login & JWT Token Generation

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

[Route("api/auth")]
[ApiController]
public class AuthController : ControllerBase
{
    private readonly AuthService _authService;

    public AuthController(AuthService authService)
    {
        _authService = authService;
    }

    [HttpPost("login")]
    public IActionResult Login([FromBody] LoginModel model)
    {
        if (model.Username == "admin" && model.Password == "password") // Mock Authentication
        {
            var token = _authService.GenerateJwtToken(model.Username);

            HttpContext.Session.SetString("JwtToken", token); // Store JWT in Session
            return Ok(new { Token = token, Message = "Login Successful" });
        }
        return Unauthorized(new { Message = "Invalid Credentials" });
    }

    [HttpPost("logout")]
    public IActionResult Logout()
    {
        HttpContext.Session.Remove("JwtToken"); // Remove JWT from session
        return Ok(new { Message = "Logged Out Successfully" });
    }
}

public class LoginModel
{
    public string Username { get; set; }
    public string Password { get; set; }
}

ðŸ”¹ Step 6: Protect Routes using JWT Authorization
Modify HomeController.cs to require authentication before accessing content.


using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

public class HomeController : Controller
{
    [Authorize] // Ensures only logged-in users can access this
    public IActionResult Index()
    {
        return View();
    }
}

ðŸ”¹ Step 7: Add JWT to Header in Requests
Whenever making API calls, include the JWT Token in the Authorization Header.


GET /protected-endpoint
Authorization: Bearer YOUR_JWT_TOKEN_HERE

ðŸ”¹ Step 8: Use JWT in Views for UI Authorization
In Views/Shared/_Layout.cshtml, modify the Navbar to show authenticated content.

@{
    var isAuthenticated = Context.Session.GetString("JwtToken") != null;
}

<ul class="navbar-nav">
    @if (isAuthenticated)
    {
        <li class="nav-item">
            <a class="nav-link" asp-action="Logout" asp-controller="Auth">Logout</a>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link" asp-action="Login" asp-controller="Auth">Login</a>
        </li>
    }
</ul>

ðŸŽ¯ Final Outcome
âœ… Users can log in and receive a JWT Token.
âœ… The token is stored in a session when "Remember Me" is enabled.
âœ… If the session expires, users need to log in again.
âœ… Protected routes (like the navbar) are only visible after authentication.
âœ… The Logout button clears the session & token.

This setup is clean, follows best practices, and works smoothly without errors. ðŸš€
