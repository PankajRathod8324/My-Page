
Customers Table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerName VARCHAR(255) NOT NULL,
    Email VARCHAR(255) UNIQUE NOT NULL,
    Country VARCHAR(100),
    SignupDate DATE
);
Products Table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY AUTO_INCREMENT,
    ProductName VARCHAR(255) NOT NULL,
    Category VARCHAR(100),
    Price DECIMAL(10,2),
    StockQuantity INT
);
Orders Table
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT,
    OrderDate DATE,
    TotalAmount DECIMAL(10,2),
    Status ENUM('Pending', 'Shipped', 'Delivered', 'Cancelled'),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
OrderDetails Table
CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY AUTO_INCREMENT,
    OrderID INT,
    ProductID INT,
    Quantity INT,
    Price DECIMAL(10,2),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);
Payments Table
CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY AUTO_INCREMENT,
    OrderID INT,
    PaymentDate DATE,
    PaymentMethod VARCHAR(50),
    Amount DECIMAL(10,2),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);
Sample Data Insertion Queries
-- Insert Customers
INSERT INTO Customers (CustomerName, Email, Country, SignupDate) VALUES
('John Doe', 'john@example.com', 'USA', '2024-01-10'),
('Jane Smith', 'jane@example.com', 'UK', '2024-02-15'),
('Alice Brown', 'alice@example.com', 'Canada', '2024-03-05'),
('Bob Williams', 'bob@example.com', 'India', '2024-04-20');

-- Insert Products
INSERT INTO Products (ProductName, Category, Price, StockQuantity) VALUES
('Laptop', 'Electronics', 800.00, 10),
('Smartphone', 'Electronics', 600.00, 15),
('T-Shirt', 'Clothing', 20.00, 50),
('Headphones', 'Electronics', 100.00, 25),
('Shoes', 'Clothing', 50.00, 30);

-- Insert Orders
INSERT INTO Orders (CustomerID, OrderDate, TotalAmount, Status) VALUES
(1, '2024-06-01', 820.00, 'Delivered'),
(2, '2024-06-10', 50.00, 'Delivered'),
(3, '2024-06-15', 600.00, 'Pending'),
(4, '2024-06-18', 120.00, 'Shipped');

-- Insert Order Details
INSERT INTO OrderDetails (OrderID, ProductID, Quantity, Price) VALUES
(1, 1, 1, 800.00),
(1, 3, 1, 20.00),
(2, 5, 1, 50.00),
(3, 2, 1, 600.00),
(4, 4, 1, 100.00),
(4, 3, 1, 20.00);

-- Insert Payments
INSERT INTO Payments (OrderID, PaymentDate, PaymentMethod, Amount) VALUES
(1, '2024-06-02', 'Credit Card', 820.00),
(2, '2024-06-11', 'PayPal', 50.00);
SQL Queries for Assignments
1. Total Sales Per Product Category
SELECT p.Category, SUM(od.Quantity * od.Price) AS TotalRevenue
FROM OrderDetails od
JOIN Products p ON od.ProductID = p.ProductID
JOIN Orders o ON od.OrderID = o.OrderID
WHERE o.Status = 'Delivered'
GROUP BY p.Category;
2. Top 5 Customers by Total Spending
SELECT c.CustomerID, c.CustomerName, SUM(o.TotalAmount) AS TotalSpent
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
WHERE o.Status = 'Delivered'
GROUP BY c.CustomerID, c.CustomerName
ORDER BY TotalSpent DESC
LIMIT 5;
3. Monthly Sales Growth Rate
SELECT DATE_FORMAT(OrderDate, '%Y-%m') AS Month, 
       SUM(TotalAmount) AS Sales,
       (SUM(TotalAmount) - LAG(SUM(TotalAmount)) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m'))) / LAG(SUM(TotalAmount)) OVER (ORDER BY DATE_FORMAT(OrderDate, '%Y-%m')) * 100 AS GrowthRate
FROM Orders
WHERE Status = 'Delivered'
GROUP BY Month;
4. Average Order Value (AOV) Per Customer
SELECT c.CustomerID, c.CustomerName, AVG(o.TotalAmount) AS AverageOrderValue
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
GROUP BY c.CustomerID, c.CustomerName;
5. Products with Low Stock (Threshold: 10)
SELECT ProductID, ProductName, StockQuantity
FROM Products
WHERE StockQuantity < 10;
6. Most Frequently Purchased Products
SELECT p.ProductID, p.ProductName, SUM(od.Quantity) AS TotalSold
FROM OrderDetails od
JOIN Products p ON od.ProductID = p.ProductID
GROUP BY p.ProductID, p.ProductName
ORDER BY TotalSold DESC
LIMIT 10;
7. Customer Retention Analysis
SELECT COUNT(DISTINCT c1.CustomerID) * 100 / COUNT(DISTINCT c2.CustomerID) AS RetentionRate
FROM Orders c1
JOIN Orders c2 ON c1.CustomerID = c2.CustomerID AND c2.OrderDate BETWEEN c1.OrderDate AND DATE_ADD(c1.OrderDate, INTERVAL 90 DAY)
WHERE c1.OrderID <> c2.OrderID;
8. Revenue Contribution of Each Payment Method
SELECT PaymentMethod, SUM(Amount) * 100 / (SELECT SUM(Amount) FROM Payments) AS RevenuePercentage
FROM Payments
GROUP BY PaymentMethod;
9. Order Processing Time Analysis
SELECT AVG(DATEDIFF(o2.OrderDate, o1.OrderDate)) AS AvgProcessingTime
FROM Orders o1
JOIN Orders o2 ON o1.OrderID = o2.OrderID
WHERE o1.Status = 'Pending' AND o2.Status = 'Delivered';
10. Repeat Customer Rate
SELECT (COUNT(DISTINCT CustomerID) - COUNT(DISTINCT CASE WHEN OrderCount = 1 THEN CustomerID END)) * 100 / COUNT(DISTINCT CustomerID) AS RepeatCustomerRate
FROM (SELECT CustomerID, COUNT(OrderID) AS OrderCount FROM Orders GROUP BY CustomerID) AS OrderCounts;
This schema, sample data, and queries provide a full-fledged e-commerce database system with analytical insights. Let me know if you need any modifications!
