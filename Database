Here’s the full PostgreSQL schema, sample data, and queries for your University Management System:

Step 1: Create Tables
sql
Copy code
CREATE TABLE Students (
    StudentID SERIAL PRIMARY KEY,
    StudentName VARCHAR(100) NOT NULL,
    DateOfBirth DATE NOT NULL,
    Gender VARCHAR(10) CHECK (Gender IN ('Male', 'Female', 'Other')),
    EnrollmentDate DATE NOT NULL,
    Major VARCHAR(100) NOT NULL
);

CREATE TABLE Courses (
    CourseID SERIAL PRIMARY KEY,
    CourseName VARCHAR(100) NOT NULL,
    Department VARCHAR(100) NOT NULL,
    Credits INT NOT NULL
);

CREATE TABLE Professors (
    ProfessorID SERIAL PRIMARY KEY,
    ProfessorName VARCHAR(100) NOT NULL,
    Department VARCHAR(100) NOT NULL
);

CREATE TABLE Enrollments (
    EnrollmentID SERIAL PRIMARY KEY,
    StudentID INT REFERENCES Students(StudentID),
    CourseID INT REFERENCES Courses(CourseID),
    EnrollmentDate DATE NOT NULL
);

CREATE TABLE Grades (
    GradeID SERIAL PRIMARY KEY,
    StudentID INT REFERENCES Students(StudentID),
    CourseID INT REFERENCES Courses(CourseID),
    Grade VARCHAR(2) CHECK (Grade IN ('A', 'B', 'C', 'D', 'F')),
    Semester VARCHAR(10) NOT NULL
);

CREATE TABLE Departments (
    DepartmentID SERIAL PRIMARY KEY,
    DepartmentName VARCHAR(100) NOT NULL,
    Dean VARCHAR(100) NOT NULL
);

CREATE TABLE Attendance (
    AttendanceID SERIAL PRIMARY KEY,
    StudentID INT REFERENCES Students(StudentID),
    CourseID INT REFERENCES Courses(CourseID),
    Date DATE NOT NULL,
    Status VARCHAR(10) CHECK (Status IN ('Present', 'Absent'))
);
Step 2: Insert Sample Data
sql
Copy code
-- Students
INSERT INTO Students (StudentName, DateOfBirth, Gender, EnrollmentDate, Major) VALUES
('John Doe', '2000-05-15', 'Male', '2023-08-01', 'Computer Science'),
('Alice Johnson', '1999-07-20', 'Female', '2022-08-01', 'Mathematics'),
('Bob Smith', '2001-02-10', 'Male', '2023-08-01', 'Physics'),
('Emily Brown', '2000-10-05', 'Female', '2022-08-01', 'Computer Science'),
('David White', '1998-12-25', 'Male', '2021-08-01', 'Mathematics');

-- Courses
INSERT INTO Courses (CourseName, Department, Credits) VALUES
('Database Systems', 'Computer Science', 3),
('Calculus', 'Mathematics', 4),
('Quantum Mechanics', 'Physics', 3),
('Machine Learning', 'Computer Science', 3),
('Linear Algebra', 'Mathematics', 3);

-- Professors
INSERT INTO Professors (ProfessorName, Department) VALUES
('Dr. Alice Brown', 'Computer Science'),
('Dr. Bob Johnson', 'Mathematics'),
('Dr. Charlie Wilson', 'Physics');

-- Enrollments
INSERT INTO Enrollments (StudentID, CourseID, EnrollmentDate) VALUES
(1, 1, '2024-01-10'),
(1, 4, '2024-02-10'),
(2, 2, '2024-01-15'),
(3, 3, '2024-01-20'),
(4, 1, '2024-02-01'),
(5, 5, '2024-02-05');

-- Grades
INSERT INTO Grades (StudentID, CourseID, Grade, Semester) VALUES
(1, 1, 'A', 'Fall 2023'),
(1, 4, 'B', 'Spring 2024'),
(2, 2, 'C', 'Fall 2023'),
(3, 3, 'D', 'Fall 2023'),
(4, 1, 'B', 'Spring 2024'),
(5, 5, 'F', 'Spring 2024');

-- Departments
INSERT INTO Departments (DepartmentName, Dean) VALUES
('Computer Science', 'Dr. Emily Carter'),
('Mathematics', 'Dr. Frank Green'),
('Physics', 'Dr. George Hill');

-- Attendance
INSERT INTO Attendance (StudentID, CourseID, Date, Status) VALUES
(1, 1, '2024-02-10', 'Present'),
(1, 4, '2024-02-12', 'Absent'),
(2, 2, '2024-02-11', 'Present'),
(3, 3, '2024-02-13', 'Absent'),
(4, 1, '2024-02-14', 'Present'),
(5, 5, '2024-02-15', 'Absent');
Step 3: Queries for Analysis
1️⃣ Retrieve the average grade for each course

sql
Copy code
SELECT c.CourseName, AVG(
    CASE 
        WHEN g.Grade = 'A' THEN 4.0
        WHEN g.Grade = 'B' THEN 3.0
        WHEN g.Grade = 'C' THEN 2.0
        WHEN g.Grade = 'D' THEN 1.0
        WHEN g.Grade = 'F' THEN 0.0
    END
) AS AverageGPA
FROM Grades g
JOIN Courses c ON g.CourseID = c.CourseID
GROUP BY c.CourseName;
2️⃣ Find the top 5 students with the highest GPA

sql
Copy code
SELECT s.StudentName, AVG(
    CASE 
        WHEN g.Grade = 'A' THEN 4.0
        WHEN g.Grade = 'B' THEN 3.0
        WHEN g.Grade = 'C' THEN 2.0
        WHEN g.Grade = 'D' THEN 1.0
        WHEN g.Grade = 'F' THEN 0.0
    END
) AS GPA
FROM Grades g
JOIN Students s ON g.StudentID = s.StudentID
GROUP BY s.StudentName
ORDER BY GPA DESC
LIMIT 5;
3️⃣ Count the number of students enrolled in each major

sql
Copy code
SELECT Major, COUNT(*) AS StudentCount
FROM Students
GROUP BY Major;
4️⃣ Identify the courses with the highest student enrollment

sql
Copy code
SELECT c.CourseName, COUNT(e.StudentID) AS EnrollmentCount
FROM Enrollments e
JOIN Courses c ON e.CourseID = c.CourseID
GROUP BY c.CourseName
ORDER BY EnrollmentCount DESC;
5️⃣ Calculate the student retention rate

sql
Copy code
SELECT (COUNT(DISTINCT StudentID) FILTER (WHERE EnrollmentDate >= '2023-08-01') * 100.0) /
       COUNT(DISTINCT StudentID) AS RetentionRate
FROM Students;
6️⃣ Find the professors teaching the most courses

sql
Copy code
SELECT p.ProfessorName, COUNT(*) AS CourseCount
FROM Professors p
JOIN Courses c ON p.Department = c.Department
GROUP BY p.ProfessorName
ORDER BY CourseCount DESC;
7️⃣ List students who have failed more than one course

sql
Copy code
SELECT s.StudentName, COUNT(g.Grade) AS FailedCourses
FROM Grades g
JOIN Students s ON g.StudentID = s.StudentID
WHERE g.Grade = 'F'
GROUP BY s.StudentName
HAVING COUNT(g.Grade) > 1;
🔟 Find the department with the highest student enrollment

sql
Copy code
SELECT d.DepartmentName, COUNT(s.StudentID) AS StudentCount
FROM Departments d
JOIN Students s ON d.DepartmentName = s.Major
GROUP BY d.DepartmentName
ORDER BY StudentCount DESC
LIMIT 1;
This setup gives you a working University Management System schema, sample data, and SQL queries that will return meaningful results. Let me know if you need modifications or additional queries!





