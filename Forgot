using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

public class AccountController : Controller
{
    private readonly YourDbContext _context;

    public AccountController(YourDbContext context)
    {
        _context = context;
    }

    [HttpGet]
    public IActionResult ForgotPassword()
    {
        return View();
    }

    [HttpPost]
    public async Task<IActionResult> ForgotPassword(string email)
    {
        var user = await _context.Users.SingleOrDefaultAsync(u => u.Email == email);
        if (user != null)
        {
            // Generate a reset token
            user.ResetToken = GenerateResetToken();
            user.ResetTokenExpiration = DateTime.UtcNow.AddHours(1);
            await _context.SaveChangesAsync();

            // Send email with reset link
            await SendResetEmail(user.Email, user.ResetToken);
        }

        // Show a message that an email has been sent
        return View("ForgotPasswordConfirmation");
    }

    [HttpGet]
    public async Task<IActionResult> ResetPassword(string token)
    {
        var user = await _context.Users.SingleOrDefaultAsync(u => u.ResetToken == token && u.ResetTokenExpiration > DateTime.UtcNow);
        if (user == null)
        {
            return NotFound();
        }

        var model = new ResetPasswordViewModel { Token = token };
        return View(model);
    }

    [HttpPost]
    public async Task<IActionResult> ResetPassword(ResetPasswordViewModel model)
    {
        var user = await _context.Users.SingleOrDefaultAsync(u => u.ResetToken == model.Token && u.ResetTokenExpiration > DateTime.UtcNow);
        if (user == null)
        {
            return NotFound();
        }

        if (model.NewPassword != model.ConfirmPassword)
        {
            ModelState.AddModelError("", "Passwords do not match.");
            return View(model);
        }

        // Hash the new password and save it
        user.PasswordHash = HashPassword(model.NewPassword);
        user.ResetToken = null; // Clear the reset token
        user.ResetTokenExpiration = null; // Clear the expiration
        await _context.SaveChangesAsync();

        return RedirectToAction("Login", "Account");
    }

    private string GenerateResetToken()
    {
        using (var rng = new RNGCryptoServiceProvider())
        {
            var tokenData = new byte[32];
            rng.GetBytes(tokenData);
            return Convert.ToBase64String(tokenData);
        }
    }

    private async Task SendResetEmail(string email, string token)
    {
        var resetLink = Url.Action("ResetPassword", "Account", new { token }, Request.Scheme);
        var message = new MailMessage();
        message.To.Add(new MailAddress(email));
        message.Subject = "Password Reset Request";
        message.Body = $"Please reset your password by clicking here: <a href='{resetLink}'>link</a>";
        message.IsBodyHtml = true;

        using (var smtp = new SmtpClient())
        {
            smtp.Host = "smtp.your-email-provider.com"; // Replace with your SMTP server
            smtp.Port = 587; // Replace with your SMTP port
            smtp.EnableSsl = true;
            smtp.Credentials = new NetworkCredential("your-email@example.com", "your-email-password"); // Replace with your email and password

            await smtp.SendMailAsync(message);
        }
    }

    private string HashPassword(string password)
    {
        // Implement your password hashing logic here
        // For example, using BCrypt or any other hashing algorithm
        using (var hmac = new HMACSHA256())
        {
            var hash = hmac.ComputeHash(Encoding.UTF8.GetBytes(password));
            return Convert.ToBase64String(hash);
        }
    }
}
