 $.ajax({
            url: "/Payment/StorePaymentData",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({
                Amount: totalPrice,
                CartItems: cartItems,
                PaymentMethod: paymentMethod,
            }),
            success: function (response) {
                if (response && response.success) {
                    window.location.href = "/Payment/Index";
                } else {
                    alert("Failed to process payment. Please try again.");
                }
            },
            error: function (xhr, status, error) {
                console.error("Error:", error);
                alert("Something went wrong while preparing payment.");
            }
        });

 [HttpPost]
    public IActionResult StorePaymentData([FromBody] PaymentDTO dto)
    {
        try
        {
            TempData["TotalAmount"] = dto.Amount.ToString("F2");
            TempData["CartItems"] = System.Text.Json.JsonSerializer.Serialize(dto.CartItems);
            TempData["PaymentMethod"] = dto.PaymentMethod;
            return Ok(new { success = true });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error storing payment data: {ex.Message}");
            return BadRequest(new { success = false, message = "An error occurred while processing payment data." });
        }

    }

 public IActionResult Index()
    {
        ViewBag.StripePublishKey = _configuration["Stripe:PublishableKey"];
        ViewBag.Amount = TempData["TotalAmount"];
        TempData.Keep("TotalAmount");
        TempData.Keep("CartItems");
        TempData.Keep("PaymentMethod");
        return View();
    }

@{
    ViewBag.Title = "Payment";
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-lg border-0 rounded-3">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">Confirm Payment</h4>
                </div>
                <div class="card-body">
                    <p class="text-muted text-center">
                        You are about to pay <strong class="text-dark">₹@ViewBag.Amount</strong>
                        for your order.
                    </p>
                    <div class="text-center my-4">
                        <form action="/Payment/Charge" method="POST">
                            <div id="stripe-button-container">
                                <script src="https://checkout.stripe.com/checkout.js" class="stripe-button"
                                    data-key="@ViewBag.StripePublishKey" data-amount="@((ViewBag.Amount))"
                                    data-name="My E-Commerce" data-description="Secure Payment" data-currency="inr"
                                    data-locale="auto">
                                </script>
                            </div>
                        </form>
                    </div>
                </div>
                <div class="card-footer text-center">
                    <p class="text-muted small mb-0">Powered by Stripe — Payment is 100% secure</p>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .stripe-button-el {
        background-color: #5469d4 !important;
        border: none !important;
        padding: 12px 24px !important;
        font-size: 1rem !important;
        border-radius: 6px !important;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1) !important;
    }

    .stripe-button-el span {
        color: white !important;
        font-weight: 600;
    }
</style>
   [HttpPost]
    public async Task<IActionResult> Charge(string stripeToken)
    {

        decimal amount = Convert.ToDecimal(TempData["TotalAmount"]);
        var cartItemsJson = TempData["CartItems"]!.ToString();
        List<CartItemDTO>? cartItems = System.Text.Json.JsonSerializer.Deserialize<List<CartItemDTO>>(cartItemsJson!);

        var (success, chargeId) = await _paymentService.ProcessToPaymentAsync(amount, stripeToken);
        var order = new OrderDTO
        {
            Price = amount,
            PaymentMethod = TempData["PaymentMethod"].ToString(),
            CartItems = cartItems,
            StripeChargeId = chargeId,
        };

        if (success)
        {
            await _orderService.CreateOrderAsync(order);

            return RedirectToAction("Success");
        }

        return RedirectToAction("Failed");
    }

    public IActionResult Success() => View();
    public IActionResult Failed() => View();
}this things now her i only get the card option in very small modal
