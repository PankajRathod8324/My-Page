FIXES AND RECOMMENDATIONS
✅ 1. Search Input id Mismatch
Bug: Your JavaScript looks for #searchBox, but your input field has no id.

Fix: Add id="searchBox" to the search input.

html
Copy code
<input class="form-control" type="search" name="search" id="searchBox" placeholder="Search by First Name"
    value="@Context.Request.Query["search"]" style="height: 60px; padding-right: 40px;">
✅ 2. Duplicate <option> Tags in Items Per Page Dropdown
You currently repeat the same logic and values. Replace it with a loop:

cshtml
Copy code
@{
    var sizes = new List<int> { 5, 10, 15 };
    var selectedSize = Convert.ToInt32(Context.Request.Query["pageSize"].FirstOrDefault() ?? "10");
}
<select name="pageSize" class="form-select form-select-sm w-auto me-3" onchange="this.form.submit()">
    @foreach (var size in sizes)
    {
        <option value="@size" selected="@(selectedSize == size ? "selected" : null)">@size</option>
    }
</select>
✅ 3. Fix: Sorting Route Has Extra Space in asp-action=" Userpage"
Bug:

html
Copy code
<a asp-action=" Userpage" ...>
That extra space before Userpage may break the route.

Fix:

html
Copy code
<a asp-action="Userpage" ...>
✅ 4. Handle Null Role in Sorting
In your service:

csharp
Copy code
"role" => filterOptions.IsAsc == true 
    ? users.OrderBy(u => u.Role.RoleName) 
    : users.OrderByDescending(u => u.Role.RoleName),
If Role can be null, you should handle it:

csharp
Copy code
"role" => filterOptions.IsAsc == true 
    ? users.OrderBy(u => u.Role != null ? u.Role.RoleName : "") 
    : users.OrderByDescending(u => u.Role != null ? u.Role.RoleName : ""),
✅ 5. Complete Missing ViewModel Mapping in Service Layer
You ended at:

csharp
Copy code
var userViewModels = users...
You need to project the query to your UserViewModel, like:

csharp
Copy code
var userViewModels = users.Select(u => new UserViewModel
{
    UserId = u.UserId,
    FirstName = u.FirstName,
    Email = u.Email,
    Phone = u.Phone,
    IsActive = u.IsActive,
    RoleName = u.Role.RoleName
}).ToPagedList(filterOptions.Page.Value, pageSize);
✅ 6. AJAX Search Handling — Also Send PageSize and Sort Parameters
In JS:

js
Copy code
fetch(`/User/Userpage?search=${searchValue}`)
You should send other parameters like pageSize, sortBy, isAsc too to preserve state.

Better approach:

js
Copy code
const searchValue = document.getElementById("searchBox").value;
const pageSize = new URLSearchParams(window.location.search).get("pageSize") || 10;
const sortBy = new URLSearchParams(window.location.search).get("sortBy") || "";
const isAsc = new URLSearchParams(window.location.search).get("isAsc") || "";

fetch(`/User/Userpage?search=${searchValue}&pageSize=${pageSize}&sortBy=${sortBy}&isAsc=${isAsc}`)
✅ 7. Optional: Enable Sorting Icons Only if Clickable
To improve UX, add .disabled to icons when sorting isn't available (optional).
