[AllowAnonymous]
public async Task<IActionResult> Success(string session_id)
{
    try
    {
        StripeConfiguration.ApiKey = _configuration["Stripe:SecretKey"];
        var service = new Stripe.Checkout.SessionService();
        var session = service.Get(session_id);

        // Retrieve the PaymentIntent
        var paymentIntentId = session.PaymentIntentId;
        var paymentIntentService = new Stripe.PaymentIntentService();
        var paymentIntent = paymentIntentService.Get(paymentIntentId);

        var transactionId = paymentIntent.Charges.Data[0].Id; // StripeChargeId you can store

        var amount = Convert.ToDecimal(TempData["TotalAmount"]);
        var cartItemsJson = TempData["CartItems"]?.ToString();
        var paymentMethod = TempData["PaymentMethod"]?.ToString();

        if (string.IsNullOrEmpty(cartItemsJson) || string.IsNullOrEmpty(paymentMethod))
        {
            return RedirectToAction("Index", "Cart");
        }

        var cartItems = System.Text.Json.JsonSerializer.Deserialize<List<CartItemDTO>>(cartItemsJson);

        var order = new OrderDTO
        {
            Price = amount,
            PaymentMethod = paymentMethod,
            CartItems = cartItems,
            StripeChargeId = transactionId, // âœ… Store actual transaction ID
        };

        await _orderService.CreateOrderAsync(order);

        ViewBag.Message = "Your payment was successful, and your order has been placed!";
        return View();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Order creation error: {ex.Message}");
        return RedirectToAction("Failed");
    }
}
