  _orderRepository.AddOrder(order);
            // Empty the usercart after successful order creation
            transaction.Commit();
            _orderRepository.EmptyCart(user.UserId);
            await _emailService.SendOrderConfirmationEmail(user, order);

using System.Net;
using System.Net.Mail;
using Microsoft.AspNetCore.Hosting;
using Entities.Models;

namespace BLL.Utilities;

public class EmailService
{
    private readonly IWebHostEnvironment _env;

    public EmailService(IWebHostEnvironment env)
    {
        _env = env;
    }

    public async Task SendOrderConfirmationEmail(User user, Order order)
    {
        string templatePath = Path.Combine(_env.WebRootPath, "Templates", "OrderConfirmation.html");
        string html = File.ReadAllText(templatePath);

        string orderRowsHtml = string.Join("", order.OrderItems.Select(item =>
            $"<tr><td>{item.Product?.Name}</td><td>{item.Quantity}</td><td>&#8377;{item.Price}</td><td>&#8377;{item.Quantity * item.Price}</td></tr>"));

        html = html.Replace("{{OrderNumber}}", order.OrderNumber)
                   .Replace("{{CustomerName}}", user.FirstName + " " + user.LastName)
                   .Replace("{{OrderDate}}", order.CreatedAt.ToString("dd MMM yyyy"))
                   .Replace("{{OrderStatus}}", order.OrderStatus)
                   .Replace("{{TotalItems}}", order.TotalItems.ToString())
                   .Replace("{{OrderRows}}", orderRowsHtml)
                   .Replace("{{TotalAmount}}", order.TotalAmount.ToString("F2"));

        byte[] pdfBytes = GeneratePdfFromHtml(html);

        var message = new MailMessage("test.dotnet@etatvasoft.com", user.Email)
        {
            Subject =  $"Order Confirmation - #{order.OrderNumber}",
            Body = html,
            IsBodyHtml = true
        };

        message.To.Add(new MailAddress(user.Email));


        var pdfStream = new MemoryStream(pdfBytes);
        message.Attachments.Add(new Attachment(pdfStream, $"Order_{order.OrderNumber}.pdf"));

        using var smtp = new SmtpClient("mail.etatvasoft.com", 587)
        {
            Credentials = new NetworkCredential("test.dotnet@etatvasoft.com", "P}N^{z-]7Ilp"),
            EnableSsl = true
        };
        await smtp.SendMailAsync(message);
    }


    private static byte[] GeneratePdfFromHtml(string htmlContent)
    {
        using var outputStream = new MemoryStream();
        using var htmlStream = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(htmlContent));

        using var pdfWriter = new iText.Kernel.Pdf.PdfWriter(outputStream);
        using var pdfDocument = new iText.Kernel.Pdf.PdfDocument(pdfWriter);

        iText.Html2pdf.HtmlConverter.ConvertToPdf(htmlStream, pdfDocument);

        pdfDocument.Close(); 

        return outputStream.ToArray();
    }
} here i wnat that the email serveice should go background like order should be complete and the email service should do work in background using IHostService the mail should be dynamic  in mail service credials are in appsetting.json file the mail should be reusable just chnage the subject body adn whom to sen dall should and the user model why r u send for just three feild just make adjust in one model
