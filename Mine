[HttpGet]
public async Task<IActionResult> UserEvents(int skip = 0, int take = 6)
{
    var allEvents = await _eventService.GetUpcomingEventsAsync(); // Filtered, not cancelled, upcoming
    var events = allEvents
        .OrderBy(e => e.EventDateTime)
        .Skip(skip)
        .Take(take)
        .ToList();

    if (Request.Headers["X-Requested-With"] == "XMLHttpRequest")
    {
        return PartialView("_EventCardsPartial", events);
    }

    return View(events);
}
public decimal GetDiscountedPrice()
{
    var hoursLeft = (EventDateTime - DateTime.Now).TotalHours;
    decimal discount = 0;

    if (hoursLeft > 12)
        discount = 0.10m;
    else if (hoursLeft > 6)
        discount = 0.25m;
    else if (hoursLeft > 3)
        discount = 0.50m;
    else if (hoursLeft > 1)
        discount = 0.75m;

    return BasePrice * (1 - discount);
}

public int GetDiscountPercentage()
{
    var hoursLeft = (EventDateTime - DateTime.Now).TotalHours;
    if (hoursLeft > 12) return 10;
    else if (hoursLeft > 6) return 25;
    else if (hoursLeft > 3) return 50;
    else if (hoursLeft > 1) return 75;
    else return 0;
}
@model List<GetEventResponse>

@{
    ViewBag.Title = "Upcoming Events";
}

<div class="container py-4">
    <h2 class="text-center mb-4">Upcoming Events</h2>
    <div id="event-container" class="row g-4">
        @Html.Partial("_EventCardsPartial", Model)
    </div>
    <div class="text-center mt-4">
        <button id="load-more-btn" class="btn btn-primary">Load More</button>
    </div>
</div>

<script>
    let skip = @Model.Count;
    const take = 6;

    document.getElementById("load-more-btn").addEventListener("click", function () {
        const btn = this;
        btn.disabled = true;
        btn.textContent = "Loading...";

        fetch(`/Event/UserEvents?skip=${skip}&take=${take}`, { headers: { "X-Requested-With": "XMLHttpRequest" } })
            .then(response => response.text())
            .then(html => {
                document.getElementById("event-container").insertAdjacentHTML("beforeend", html);
                skip += take;
                btn.disabled = false;
                btn.textContent = "Load More";
            })
            .catch(error => {
                console.error(error);
                btn.textContent = "Error Loading";
            });
    });
</script>
@model IEnumerable<GetEventResponse>

@foreach (var item in Model)
{
    var discountedPrice = item.GetDiscountedPrice();
    var discountPercent = item.GetDiscountPercentage();
    <div class="col-md-4 col-sm-6">
        <div class="card h-100 shadow-sm border-0">
            <div class="card-body d-flex flex-column">
                <h5 class="card-title">@item.Title</h5>
                <p class="text-muted small mb-1">
                    @item.EventDateTime.ToString("dd MMM yyyy, hh:mm tt") | @item.Location
                </p>
                <p class="card-text flex-grow-1">
                    @item.Description?.Substring(0, Math.Min(item.Description.Length, 100))...
                </p>
                <div>
                    @if (discountPercent > 0)
                    {
                        <span class="badge bg-success">@discountPercent% OFF</span>
                        <p class="mt-2 mb-0">
                            <del class="text-muted">₹@item.BasePrice.ToString("F0")</del>
                            <strong class="ms-2 text-primary">₹@discountedPrice.ToString("F0")</strong>
                        </p>
                    }
                    else
                    {
                        <p class="mt-2 mb-0">
                            <strong class="text-primary">₹@item.BasePrice.ToString("F0")</strong>
                        </p>
                    }
                </div>
                <a href="@Url.Action("Book", "Event", new { id = item.EventID })" class="btn btn-outline-primary mt-3 w-100">
                    Book Now
                </a>
            </div>
        </div>
    </div>
}
