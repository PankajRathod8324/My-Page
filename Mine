@model IEnumerable<Entities.ViewModels.OrderDTO>

<div class="container py-5">
    <h2 class="text-center mb-4">ðŸ§¾ My Order History</h2>
    
    @if (!Model.Any())
    {
        <div class="alert alert-info text-center">No orders found.</div>
    }
    else
    {
        <div class="row">
            @foreach (var order in Model)
            {
                <div class="col-md-6 mb-4">
                    <div class="card shadow-sm border-0 rounded-3">
                        <div class="card-body">
                            <h5 class="card-title mb-2">Order #: <strong>@order.Ordernumber</strong></h5>
                            <p class="text-muted mb-1">Date: @order.Createdat.ToString("dd MMM yyyy")</p>
                            <p class="mb-1">Payment: <strong>@order.Paymentmethod</strong></p>
                            <p class="mb-1">Status: 
                                <span class="badge @GetStatusClass(order.Orderstatus)">
                                    @order.Orderstatus
                                </span>
                            </p>
                            <hr />
                            <ul class="list-group list-group-flush mb-3">
                                @foreach (var item in order.CartItems)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>@item.Product?.Name (x@item.Quantity)</span>
                                        <span>â‚¹@(item.Price)</span>
                                    </li>
                                }
                            </ul>
                            <h6 class="text-end fw-bold">Total: â‚¹@order.CartItems.Sum(i => i.Price * i.Quantity)</h6>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@functions {
    string GetStatusClass(string status)
    {
        return status switch
        {
            "Pending" => "bg-warning text-dark",
            "Processing" => "bg-info",
            "Completed" => "bg-success",
            "Cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }
}
@model IEnumerable<Entities.ViewModels.OrderDTO>

<div class="container py-5">
    <h2 class="text-center mb-4">ðŸ“¦ Manage Orders</h2>

    <table class="table table-bordered table-hover table-responsive">
        <thead class="table-dark">
            <tr>
                <th>Order #</th>
                <th>User</th>
                <th>Date</th>
                <th>Payment</th>
                <th>Items</th>
                <th>Total Price</th>
                <th>Status</th>
                <th>Update</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in Model)
            {
                <tr>
                    <td>@order.Ordernumber</td>
                    <td>@order.Createdby</td>
                    <td>@order.Createdat.ToString("dd MMM yyyy")</td>
                    <td>@order.Paymentmethod</td>
                    <td>
                        <ul class="list-unstyled mb-0">
                            @foreach (var item in order.CartItems)
                            {
                                <li>@item.Product?.Name (x@item.Quantity)</li>
                            }
                        </ul>
                    </td>
                    <td>â‚¹@order.CartItems.Sum(i => i.Price * i.Quantity)</td>
                    <td>
                        <select class="form-select order-status" data-orderid="@order.Orderid">
                            <option value="Pending" @(order.Orderstatus == "Pending" ? "selected" : "")>Pending</option>
                            <option value="Processing" @(order.Orderstatus == "Processing" ? "selected" : "")>Processing</option>
                            <option value="Completed" @(order.Orderstatus == "Completed" ? "selected" : "")>Completed</option>
                            <option value="Cancelled" @(order.Orderstatus == "Cancelled" ? "selected" : "")>Cancelled</option>
                        </select>
                    </td>
                    <td>
                        <button class="btn btn-sm btn-success update-status-btn" data-orderid="@order.Orderid">
                            <i class="fas fa-save"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.update-status-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                const orderId = this.getAttribute('data-orderid');
                const selectedStatus = document.querySelector(`.order-status[data-orderid="${orderId}"]`).value;

                fetch(`/Admin/UpdateOrderStatus`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ orderId, status: selectedStatus })
                })
                .then(res => res.ok ? res.json() : Promise.reject(res))
                .then(data => {
                    alert("Status updated successfully!");
                    location.reload();
                })
                .catch(err => {
                    alert("Error updating order status.");
                    console.error(err);
                });
            });
        });
    </script>
}
[HttpPost]
public IActionResult UpdateOrderStatus([FromBody] OrderStatusUpdateModel model)
{
    if (model == null) return BadRequest();

    _orderService.UpdateStatus(model.OrderId, model.Status); // Your own logic
    return Ok(new { success = true });
}

public class OrderStatusUpdateModel
{
    public int OrderId { get; set; }
    public string Status { get; set; } = string.Empty;
}
