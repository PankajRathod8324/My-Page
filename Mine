public abstract class BaseEntity
{
    public int Id { get; set; } // Or Guid if you want globally unique Ids
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    public string? CreatedBy { get; set; } // store UserId or email
    public DateTime? UpdatedAt { get; set; }
    public string? UpdatedBy { get; set; }
    public bool IsDeleted { get; set; } = false; // Soft delete
}
public class User : BaseEntity
{
    public string Name { get; set; }
    public string Email { get; set; }
    public string PasswordHash { get; set; }
    public string Role { get; set; }
}

public class Event : BaseEntity
{
    public string Title { get; set; }
    public string Description { get; set; }
    public string Location { get; set; }
    public DateTime EventDateTime { get; set; }
    public decimal BasePrice { get; set; }
    public int SeatsAvailable { get; set; }
    public bool IsCancelled { get; set; }
}
public interface IRepository<T> where T : BaseEntity
{
    Task<T> GetByIdAsync(int id);
    Task<IEnumerable<T>> GetAllAsync();
    Task AddAsync(T entity);
    void Update(T entity);
    void Delete(T entity);
}
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    role TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by TEXT NULL,
    updated_at TIMESTAMPTZ NULL,
    updated_by TEXT NULL,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE events (
    id SERIAL PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT NULL,
    location TEXT NOT NULL,
    event_date_time TIMESTAMPTZ NOT NULL,
    base_price NUMERIC(18,2) NOT NULL,
    seats_available INT NOT NULL,
    is_cancelled BOOLEAN NOT NULL DEFAULT FALSE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by TEXT NULL,
    updated_at TIMESTAMPTZ NULL,
    updated_by TEXT NULL,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE bookings (
    id SERIAL PRIMARY KEY,
    user_id INT NOT NULL REFERENCES users(id),
    event_id INT NOT NULL REFERENCES events(id),
    booking_time TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    final_price NUMERIC(18,2) NOT NULL,
    refund_amount NUMERIC(18,2) NULL,
    status TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by TEXT NULL,
    updated_at TIMESTAMPTZ NULL,
    updated_by TEXT NULL,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE refund_logs (
    id SERIAL PRIMARY KEY,
    booking_id INT NOT NULL REFERENCES bookings(id),
    refund_percent NUMERIC(5,2) NOT NULL,
    refund_amount NUMERIC(18,2) NOT NULL,
    refunded_on TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by TEXT NULL,
    updated_at TIMESTAMPTZ NULL,
    updated_by TEXT NULL,
    is_deleted BOOLEAN NOT NULL DEFAULT FALSE
);
