[Authorize(Roles = "Admin")]
[ApiController]
[Route("api/[controller]")]
public class UserController : ControllerBase
{
    private readonly IUserService _userService;
    private readonly IHttpContextAccessor _httpContextAccessor;

    public UserController(IUserService userService, IHttpContextAccessor httpContextAccessor)
    {
        _userService = userService;
        _httpContextAccessor = httpContextAccessor;
    }

    private int GetCurrentUserId()
    {
        var userIdString = _httpContextAccessor.HttpContext?.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        return int.TryParse(userIdString, out int userId) ? userId : 0;
    }

    [HttpPost("AddUser")]
    public async Task<IActionResult> AddUser([FromBody] AddUserRequestDTO dto)
    {
        var createdBy = GetCurrentUserId();
        var user = await _userService.AddUserAsync(dto, createdBy);
        return Ok(user);
    }

    [HttpPut("EditUser")]
    public async Task<IActionResult> EditUser([FromBody] EditUserRequestDTO dto)
    {
        var updatedBy = GetCurrentUserId();
        var user = await _userService.EditUserAsync(dto, updatedBy);
        return Ok(user);
    }

    [HttpGet("{id}")]
    public async Task<IActionResult> GetUser(int id)
    {
        var user = await _userService.GetUserByIdAsync(id);
        return Ok(user);
    }

    [HttpGet("All")]
    public async Task<IActionResult> GetAllUsers()
    {
        var users = await _userService.GetAllUsersAsync();
        return Ok(users);
    }

    [HttpDelete("{id}")]
    public async Task<IActionResult> DeleteUser(int id)
    {
        var result = await _userService.DeleteUserAsync(id);
        if (!result) return NotFound();
        return Ok(new { message = "User deleted successfully." });
    }
}
public class UserService : IUserService
{
    private readonly IUserRepository _userRepository;
    public UserService(IUserRepository userRepository)
    {
        _userRepository = userRepository;
    }

    public async Task<UserResponseDTO> AddUserAsync(AddUserRequestDTO dto, int createdBy)
    {
        var user = new User
        {
            Name = dto.Name,
            Email = dto.Email,
            Role = dto.Role,
            PasswordHash = BCrypt.Net.BCrypt.HashPassword(dto.Password),
            CreatedBy = createdBy
        };

        var createdUser = await _userRepository.AddUserAsync(user);

        return new UserResponseDTO
        {
            Id = createdUser.Id,
            Name = createdUser.Name,
            Email = createdUser.Email,
            Role = createdUser.Role
        };
    }

    public async Task<UserResponseDTO> EditUserAsync(EditUserRequestDTO dto, int updatedBy)
    {
        var user = await _userRepository.GetUserByIdAsync(dto.Id);
        if (user == null) throw new Exception("User not found");

        user.Name = dto.Name;
        user.Role = dto.Role;
        user.UpdatedAt = DateTime.UtcNow;
        user.UpdatedBy = updatedBy;

        var updatedUser = await _userRepository.UpdateUserAsync(user);

        return new UserResponseDTO
        {
            Id = updatedUser.Id,
            Name = updatedUser.Name,
            Email = updatedUser.Email,
            Role = updatedUser.Role
        };
    }

    public async Task<UserResponseDTO> GetUserByIdAsync(int id)
    {
        var user = await _userRepository.GetUserByIdAsync(id);
        if (user == null) throw new Exception("User not found");

        return new UserResponseDTO
        {
            Id = user.Id,
            Name = user.Name,
            Email = user.Email,
            Role = user.Role
        };
    }

    public async Task<List<UserResponseDTO>> GetAllUsersAsync()
    {
        var users = await _userRepository.GetAllUsersAsync();
        return users.Select(user => new UserResponseDTO
        {
            Id = user.Id,
            Name = user.Name,
            Email = user.Email,
            Role = user.Role
        }).ToList();
    }

    public async Task<bool> DeleteUserAsync(int id)
    {
        return await _userRepository.DeleteUserAsync(id);
    }
}
public interface IUserService
{
    Task<UserResponseDTO> AddUserAsync(AddUserRequestDTO dto, int createdBy);
    Task<UserResponseDTO> EditUserAsync(EditUserRequestDTO dto, int updatedBy);
    Task<UserResponseDTO> GetUserByIdAsync(int id);
    Task<List<UserResponseDTO>> GetAllUsersAsync();
    Task<bool> DeleteUserAsync(int id);
}
public class UserRepository : IUserRepository
{
    private readonly ApplicationDbContext _context;

    public UserRepository(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<User> AddUserAsync(User user)
    {
        _context.Users.Add(user);
        await _context.SaveChangesAsync();
        return user;
    }

    public async Task<User> UpdateUserAsync(User user)
    {
        _context.Users.Update(user);
        await _context.SaveChangesAsync();
        return user;
    }

    public async Task<User> GetUserByIdAsync(int id)
    {
        return await _context.Users.FindAsync(id);
    }

    public async Task<List<User>> GetAllUsersAsync()
    {
        return await _context.Users.ToListAsync();
    }

    public async Task<bool> DeleteUserAsync(int id)
    {
        var user = await _context.Users.FindAsync(id);
        if (user == null) return false;
        _context.Users.Remove(user);
        await _context.SaveChangesAsync();
        return true;
    }
}
public interface IUserRepository
{
    Task<User> AddUserAsync(User user);
    Task<User> UpdateUserAsync(User user);
    Task<User> GetUserByIdAsync(int id);
    Task<List<User>> GetAllUsersAsync();
    Task<bool> DeleteUserAsync(int id);
}
public class UserResponseDTO
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Email { get; set; }
    public string Role { get; set; }
}
public class EditUserRequestDTO
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Role { get; set; }
}
public class AddUserRequestDTO
{
    public string Name { get; set; }
    public string Email { get; set; }
    public string Role { get; set; }
    public string Password { get; set; }
}
