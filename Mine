[Route("api/[controller]")]
[ApiController]
public class RecentlyViewedController : ControllerBase
{
    private readonly ApplicationDbContext _context;
    private readonly UserManager<IdentityUser> _userManager;

    public RecentlyViewedController(ApplicationDbContext context, UserManager<IdentityUser> userManager)
    {
        _context = context;
        _userManager = userManager;
    }

    [HttpPost("Add")]
    public async Task<IActionResult> AddView([FromBody] int productId)
    {
        var user = await _userManager.GetUserAsync(User);
        if (user == null) return Unauthorized();

        var existing = _context.RecentlyViewedProducts
            .FirstOrDefault(r => r.UserId == user.Id && r.ProductId == productId);

        if (existing != null)
        {
            existing.ViewedAt = DateTime.UtcNow;
        }
        else
        {
            _context.RecentlyViewedProducts.Add(new RecentlyViewedProduct
            {
                ProductId = productId,
                UserId = user.Id,
                ViewedAt = DateTime.UtcNow
            });
        }

        await _context.SaveChangesAsync();
        return Ok();
    }
}
public async Task<IActionResult> ProductDetails(int id)
{
    var product = await _context.Products.FindAsync(id);

    var user = await _userManager.GetUserAsync(User);
    var recentlyViewed = new List<Product>();

    if (user != null)
    {
        recentlyViewed = await _context.RecentlyViewedProducts
            .Where(r => r.UserId == user.Id && r.ProductId != id)
            .OrderByDescending(r => r.ViewedAt)
            .Take(5)
            .Select(r => r.Product)
            .ToListAsync();
    }

    var model = new ProductDetailsVM
    {
        Product = product,
        RecentlyViewed = recentlyViewed
    };

    return View(model);
}
