To implement pagination, search, and sorting only on the menu items section in your _MenuItemsPV.cshtml partial view, follow these steps:

1. Modify Your Controller
Update your MenuController to support pagination, search, and sorting.

Controller Code (MenuController.cs)
csharp
Copy code
using X.PagedList;
using X.PagedList.Mvc.Core;

public IActionResult MenuItem(int? page, string search, string sortOrder)
{
    int pageSize = 5; // Number of items per page
    int pageNumber = (page ?? 1); // Default to page 1 if not provided

    var menuItems = _context.MenuItems.AsQueryable(); // Fetch data from DB

    // Search functionality
    if (!string.IsNullOrEmpty(search))
    {
        menuItems = menuItems.Where(m => m.ItemName.Contains(search));
    }

    // Sorting functionality
    switch (sortOrder)
    {
        case "name_desc":
            menuItems = menuItems.OrderByDescending(m => m.ItemName);
            break;
        case "price_asc":
            menuItems = menuItems.OrderBy(m => m.Rate);
            break;
        case "price_desc":
            menuItems = menuItems.OrderByDescending(m => m.Rate);
            break;
        default:
            menuItems = menuItems.OrderBy(m => m.ItemName); // Default sorting by name
            break;
    }

    var pagedItems = menuItems.ToPagedList(pageNumber, pageSize);

    return PartialView("_MenuItemsPV", pagedItems); // Return only the partial view
}
2. Modify _MenuItemsPV.cshtml
Now update your partial view to use pagination and sorting.

Updated _MenuItemsPV.cshtml
html
Copy code
@using X.PagedList.Mvc.Core
@model IPagedList<DAL.ViewModel.MenuItemVM>

<table id="table" class="table align-middle table-hover bg-white">
    <thead class="bg-light">
        <tr>
            <th><input type="checkbox" class="me-2" id="selectAll" style="width: 16px; height: 16px;" />Name</th>
            <th>
                <a href="?sortOrder=@(ViewBag.SortOrder == "name_asc" ? "name_desc" : "name_asc")">
                    Item Name
                </a>
            </th>
            <th>
                <a href="?sortOrder=@(ViewBag.SortOrder == "price_asc" ? "price_desc" : "price_asc")">
                    Rate
                </a>
            </th>
            <th>Quantity</th>
            <th>Available</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var menuitem in Model)
        {
            <tr class="tblclass" data-id="@menuitem.ItemId">
                <td>
                    <div class="d-flex align-items-center">
                        <input type="checkbox" name="chkItem" class="checkclass" />
                        <img src="~/assest/dining-menu.png" alt="" style="width: 45px; height: 45px"
                            class="rounded-circle ms-2" />
                        <div class="ms-3">
                            <p class="text-secondary mb-1">@menuitem.ItemName</p>
                        </div>
                    </div>
                </td>
                <td>
                    <img src="~/assest/icons/@(menuitem.ItemtypeId == 1 ? "veg-icon.svg" : "non-veg-icon.svg")"
                        style="width: 20px; height: 20px" class="rounded-circle" />
                </td>
                <td>
                    <p class="fw-normal mb-1">@menuitem.Rate</p>
                </td>
                <td>
                    <p class="fw-normal mb-1">@menuitem.Quantity</p>
                </td>
                <td class="text-center">
                    <div class="form-check form-switch">
                        <input class="form-check-input canView" type="checkbox" id="toggleSwitch"
                            @(menuitem.IsAvailable ?? false ? "checked" : "")>
                    </div>
                </td>
                <td>
                    <i class="fa-solid fa-marker" data-bs-toggle="modal" data-bs-target="#editMenuItemModal"
                        onclick="editItem(@menuitem.ItemId)"></i>
                    <i class="fa-regular fa-trash-can ms-4" data-bs-toggle="modal" data-bs-target="#editMenuItemModal"
                        onclick="editItem(@menuitem.ItemId)"></i>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination -->
<div class="pagination-container">
    @Html.PagedListPager(Model, page => Url.Action("MenuItem", new { page, search = ViewBag.Search, sortOrder = ViewBag.SortOrder }))
</div>
3. Update menuCategoryPV.cshtml to Support AJAX Pagination
Modify the search and pagination so that they work asynchronously.

Modify the Search and Sorting Form
html
Copy code
<form id="searchForm">
    <div class="row d-flex mb-2 align-item-center justify-content-center ms-0 me-0 rounded">
        <div class="col">
            <h1 class="">Items </h1>
        </div>
        <div class="col-5 d-flex align-items-center gap-3 justify-content-end pe-0">
            <input class="form-control d-inline w-auto" type="search" id="searchBox" name="search"
                placeholder="Search by Item Name">
            <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </div>
</form>
4. Add AJAX for Pagination, Search, and Sorting
Modify your JavaScript to fetch the data dynamically.

JavaScript Code
html
Copy code
<script>
    $(document).ready(function () {
        // Fetch initial data
        fetchMenuItems();

        // Handle search form submission
        $("#searchForm").submit(function (event) {
            event.preventDefault();
            fetchMenuItems();
        });

        // Handle pagination clicks
        $(document).on("click", ".pagination-container a", function (event) {
            event.preventDefault();
            var page = $(this).attr("href").split("=")[1];
            fetchMenuItems(page);
        });

        // Fetch menu items with AJAX
        function fetchMenuItems(page = 1) {
            var search = $("#searchBox").val();
            var sortOrder = getUrlParameter('sortOrder') || '';

            $.ajax({
                url: '@Url.Action("MenuItem", "Menu")',
                type: 'GET',
                data: { page: page, search: search, sortOrder: sortOrder },
                success: function (data) {
                    $('#menuItemsContainer').html(data);
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching items:', error);
                }
            });
        }

        // Get URL parameters for sorting
        function getUrlParameter(name) {
            name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
            var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
            var results = regex.exec(window.location.href);
            return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
        }
    });
</script>
Final Outcome
Pagination: Displays 5 items per page with Next and Previous buttons.
Search: Filters items dynamically as you type.
Sorting: Clicking on Item Name or Rate headers sorts the items.
This ensures that only the menu items section updates without reloading the entire page.

Let me know if you need modifications!
