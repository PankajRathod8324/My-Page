using System.Data;
using Dapper;
using Npgsql;

public interface IUserRepository
{
    Task AddUserAsync(User user);
}

public class UserRepository : IUserRepository
{
    private readonly IConfiguration _configuration;
    private readonly string _connectionString;

    public UserRepository(IConfiguration configuration)
    {
        _configuration = configuration;
        _connectionString = _configuration.GetConnectionString("DefaultConnection");
    }

    public async Task AddUserAsync(User user)
    {
        using (var connection = new NpgsqlConnection(_connectionString))
        {
            var parameters = new DynamicParameters();
            parameters.Add("p_UserName", user.UserName, DbType.String);
            parameters.Add("p_Email", user.Email, DbType.String);
            parameters.Add("p_PasswordHash", user.PasswordHash, DbType.String);
            parameters.Add("p_Role", user.Role, DbType.String);

            await connection.ExecuteAsync(
                "AddUser",
                parameters,
                commandType: CommandType.StoredProcedure);
        }
    }
}
CREATE OR REPLACE FUNCTION AddUser(
    p_UserName VARCHAR,
    p_Email VARCHAR,
    p_PasswordHash TEXT,
    p_Role VARCHAR
)
RETURNS VOID AS
$$
BEGIN
    INSERT INTO Users (UserName, Email, PasswordHash, Role)
    VALUES (p_UserName, p_Email, p_PasswordHash, p_Role);
END;
$$ LANGUAGE plpgsql;
