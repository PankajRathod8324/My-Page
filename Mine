@model Entities.ViewModels.OrderWithAddressVM

@{
    ViewBag.Title = "Place Order";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />

<div class="container py-5">
    <h2 class="mb-4 text-center">üìç Select Address & Place Order</h2>

    <div class="row">
        <!-- Address Section -->
        <div class="col-md-6">
            <h5>üì¶ Your Addresses</h5>
            @if (Model.Addresses.Any())
            {
                <div class="list-group mb-3">
                    @foreach (var address in Model.Addresses)
                    {
                        <label class="list-group-item d-flex justify-content-between align-items-center">
                            <div>
                                <input type="radio" name="SelectedAddressId" value="@address.AddressId" class="form-check-input me-2" />
                                <strong>@address.FullName</strong><br />
                                <small>@address.Street, @address.City, @address.State - @address.Zip</small>
                            </div>
                        </label>
                    }
                </div>
            }
            else
            {
                <p>No saved addresses. Add one below.</p>
            }

            <!-- Add New Address Form -->
            <h6 class="mt-4">‚ûï Add New Address</h6>
            <form method="post" asp-action="AddAddress" asp-controller="Order">
                <div class="mb-2">
                    <input type="text" name="FullName" class="form-control" placeholder="Full Name" required />
                </div>
                <div class="mb-2">
                    <input type="text" name="Street" class="form-control" placeholder="Street Address" required />
                </div>
                <div class="mb-2">
                    <input type="text" name="City" class="form-control" placeholder="City" required />
                </div>
                <div class="mb-2">
                    <input type="text" name="State" class="form-control" placeholder="State" required />
                </div>
                <div class="mb-2">
                    <input type="text" name="Zip" class="form-control" placeholder="ZIP Code" required />
                </div>
                <button type="submit" class="btn btn-primary">Add Address</button>
            </form>
        </div>

        <!-- Order + Payment Section -->
        <div class="col-md-6">
            <h5>üí∞ Payment Method</h5>
            <select class="form-select mb-4" id="paymentMethod">
                <option value="Cash On Delivery">Cash On Delivery</option>
                <option value="UPI">UPI</option>
                <option value="Net Banking">Net Banking</option>
                <option value="Card">Card</option>
            </select>

            <button class="btn btn-success w-100" onclick="placeOrder()">üõí Confirm & Place Order</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function placeOrder() {
            const addressId = document.querySelector('input[name="SelectedAddressId"]:checked');
            const paymentMethod = document.getElementById("paymentMethod").value;

            if (!addressId) {
                alert("Please select an address to continue.");
                return;
            }

            const orderData = {
                AddressId: addressId.value,
                PaymentMethod: paymentMethod
            };

            fetch("/Order/ConfirmOrder", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(orderData)
            })
            .then(res => res.ok ? res.json() : Promise.reject(res))
            .then(result => {
                alert("Order placed successfully!");
                window.location.href = "/Order/MyOrders";
            })
            .catch(err => {
                alert("Something went wrong while placing the order.");
                console.error(err);
            });
        }
    </script>
}
public IActionResult PlaceOrder()
{
    var model = new OrderWithAddressVM
    {
        Addresses = _userService.GetAddresses(UserId)
    };
    return View(model);
}

[HttpPost]
public IActionResult AddAddress(AddressDTO address)
{
    _userService.AddAddress(UserId, address);
    return RedirectToAction("PlaceOrder");
}

[HttpPost]
public IActionResult ConfirmOrder([FromBody] OrderPlaceRequestDTO request)
{
    _orderService.PlaceOrder(UserId, request.AddressId, request.PaymentMethod);
    return Ok(new { success = true });
}
