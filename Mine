public class AddEventRequest
{
    public string Title { get; set; }
    public string Description { get; set; }
    public string Location { get; set; }
    public DateTime EventDateTime { get; set; }
    public decimal BasePrice { get; set; }
    public int SeatsAvailable { get; set; }
}
public class AddEventResponse
{
    public int EventID { get; set; }
    public bool IsSuccess { get; set; }
}
public class EditEventRequest
{
    public int EventID { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public string Location { get; set; }
    public DateTime EventDateTime { get; set; }
    public decimal BasePrice { get; set; }
    public int SeatsAvailable { get; set; }
}
public class GetEventResponse
{
    public int EventID { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public string Location { get; set; }
    public DateTime EventDateTime { get; set; }
    public decimal BasePrice { get; set; }
    public int SeatsAvailable { get; set; }
    public bool IsCancelled { get; set; }
}
public interface IEventRepository
{
    Task<Event> AddEventAsync(Event evt);
    Task<Event> GetEventByIdAsync(int eventId);
    Task<IEnumerable<Event>> GetAllEventsAsync();
    Task UpdateEventAsync(Event evt);
    Task DeleteEventAsync(int eventId);
}
public class EventRepository : IEventRepository
{
    private readonly AppDbContext _context;
    public EventRepository(AppDbContext context) => _context = context;

    public async Task<Event> AddEventAsync(Event evt)
    {
        _context.Events.Add(evt);
        await _context.SaveChangesAsync();
        return evt;
    }

    public async Task<Event> GetEventByIdAsync(int eventId)
        => await _context.Events.FindAsync(eventId);

    public async Task<IEnumerable<Event>> GetAllEventsAsync()
        => await _context.Events.ToListAsync();

    public async Task UpdateEventAsync(Event evt)
    {
        _context.Events.Update(evt);
        await _context.SaveChangesAsync();
    }

    public async Task DeleteEventAsync(int eventId)
    {
        var evt = await _context.Events.FindAsync(eventId);
        if (evt != null)
        {
            _context.Events.Remove(evt);
            await _context.SaveChangesAsync();
        }
    }
}
public interface IEventService
{
    Task<AddEventResponse> AddEventAsync(AddEventRequest request);
    Task<EditEventResponse> EditEventAsync(EditEventRequest request);
    Task<GetEventResponse> GetEventByIdAsync(int eventId);
    Task<IEnumerable<GetEventResponse>> GetAllEventsAsync();
    Task<bool> DeleteEventAsync(int eventId);
}
public class EventService : IEventService
{
    private readonly IEventRepository _repo;
    public EventService(IEventRepository repo) => _repo = repo;

    public async Task<AddEventResponse> AddEventAsync(AddEventRequest request)
    {
        var evt = new Event
        {
            Title = request.Title,
            Description = request.Description,
            Location = request.Location,
            EventDateTime = request.EventDateTime,
            BasePrice = request.BasePrice,
            SeatsAvailable = request.SeatsAvailable
        };

        evt = await _repo.AddEventAsync(evt);

        return new AddEventResponse
        {
            EventID = evt.EventID,
            IsSuccess = true
        };
    }

    public async Task<EditEventResponse> EditEventAsync(EditEventRequest request)
    {
        var evt = await _repo.GetEventByIdAsync(request.EventID);
        if (evt == null) return new EditEventResponse { IsSuccess = false };

        evt.Title = request.Title;
        evt.Description = request.Description;
        evt.Location = request.Location;
        evt.EventDateTime = request.EventDateTime;
        evt.BasePrice = request.BasePrice;
        evt.SeatsAvailable = request.SeatsAvailable;

        await _repo.UpdateEventAsync(evt);

        return new EditEventResponse { IsSuccess = true };
    }

    public async Task<GetEventResponse> GetEventByIdAsync(int eventId)
    {
        var evt = await _repo.GetEventByIdAsync(eventId);
        if (evt == null) return null;

        return new GetEventResponse
        {
            EventID = evt.EventID,
            Title = evt.Title,
            Description = evt.Description,
            Location = evt.Location,
            EventDateTime = evt.EventDateTime,
            BasePrice = evt.BasePrice,
            SeatsAvailable = evt.SeatsAvailable,
            IsCancelled = evt.IsCancelled
        };
    }

    public async Task<IEnumerable<GetEventResponse>> GetAllEventsAsync()
    {
        var events = await _repo.GetAllEventsAsync();
        return events.Select(evt => new GetEventResponse
        {
            EventID = evt.EventID,
            Title = evt.Title,
            Description = evt.Description,
            Location = evt.Location,
            EventDateTime = evt.EventDateTime,
            BasePrice = evt.BasePrice,
            SeatsAvailable = evt.SeatsAvailable,
            IsCancelled = evt.IsCancelled
        });
    }

    public async Task<bool> DeleteEventAsync(int eventId)
    {
        var evt = await _repo.GetEventByIdAsync(eventId);
        if (evt == null) return false;

        await _repo.DeleteEventAsync(eventId);
        return true;
    }
}
public class EventController : Controller
{
    private readonly IEventService _service;
    public EventController(IEventService service) => _service = service;

    [HttpGet]
    public async Task<IActionResult> Index()
    {
        var events = await _service.GetAllEventsAsync();
        return View(events);
    }

    [HttpGet]
    public IActionResult Create() => View();

    [HttpPost]
    public async Task<IActionResult> Create(AddEventRequest request)
    {
        if (!ModelState.IsValid) return View(request);

        var result = await _service.AddEventAsync(request);
        if (result.IsSuccess) return RedirectToAction(nameof(Index));

        ModelState.AddModelError("", "Failed to add event.");
        return View(request);
    }

    [HttpGet]
    public async Task<IActionResult> Edit(int id)
    {
        var evt = await _service.GetEventByIdAsync(id);
        if (evt == null) return NotFound();

        var editRequest = new EditEventRequest
        {
            EventID = evt.EventID,
            Title = evt.Title,
            Description = evt.Description,
            Location = evt.Location,
            EventDateTime = evt.EventDateTime,
            BasePrice = evt.BasePrice,
            SeatsAvailable = evt.SeatsAvailable
        };

        return View(editRequest);
    }

    [HttpPost]
    public async Task<IActionResult> Edit(EditEventRequest request)
    {
        if (!ModelState.IsValid) return View(request);

        var result = await _service.EditEventAsync(request);
        if (result.IsSuccess) return RedirectToAction(nameof(Index));

        ModelState.AddModelError("", "Failed to update event.");
        return View(request);
    }

    [HttpPost]
    public async Task<IActionResult> Delete(int id)
    {
        await _service.DeleteEventAsync(id);
        return RedirectToAction(nameof(Index));
    }
}
