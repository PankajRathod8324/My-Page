public class ProductDTO
{
    public int Productid { get; set; }
    public int? Categoryid { get; set; }
    public string? CategoryName { get; set; }
    public string? Name { get; set; }
    public string? Details { get; set; }
    public decimal Price { get; set; }
    public bool Active { get; set; }
    public DateTime? Createdat { get; set; }
    public DateTime? Modifiedat { get; set; }
    public bool Deleted { get; set; }
    public string? Images { get; set; }
    public List<Productimage> Image { get; set; } = new();

    // Wishlist
    public bool IsInWishlist { get; set; }

    // Return Policy
    public bool IsReturnable { get; set; }
    public string? ReturnPolicyName { get; set; }
    public string? ReturnPolicyDescription { get; set; }
    public int? ReturnDays { get; set; }
}
public ProductDTO GetProductById(int productId)
{
    Product product = _productRepository.GetProductById(productId);
    if (product == null) return null!;

    string? useremail = _httpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Email)?.Value;
    User user = _userRepository.GetUserByEmail(useremail);
    if (user == null) throw new Exception("User not found.");

    Category? category = product.Categoryid.HasValue
        ? _categoryRepository.GetCategoryById(product.Categoryid.Value)
        : null;

    List<Productimage> productImages = _productRepository.GetProductimagesByProductId(product.Productid);

    // Fetch return policy if returnable
    ProductReturnPolicy? returnPolicy = null;
    if (product.IsReturnable)
    {
        returnPolicy = _productRepository.GetReturnPolicyByProductId(product.Productid);
    }

    return new ProductDTO
    {
        Productid = product.Productid,
        Categoryid = product.Categoryid,
        Name = product.Name,
        CategoryName = category?.Name ?? "Unknown",
        Image = productImages ?? new List<Productimage>(),
        Images = product.Imagepath,
        Active = product.Active,
        Price = product.Price,
        Details = product.Details,
        Createdat = product.Createdat,
        Modifiedat = product.Modifiedat,
        Deleted = product.Deleted,
        IsInWishlist = _productRepository.IsProductIntoWishlist(product.Productid, user.Userid),

        IsReturnable = product.IsReturnable,
        ReturnPolicyName = returnPolicy?.Name,
        ReturnPolicyDescription = returnPolicy?.Description,
        ReturnDays = returnPolicy?.ReturnDays
    };
}
@if (Model.IsReturnable)
{
    <div class="card mt-4 shadow-sm border-success">
        <div class="card-body">
            <h6 class="text-success fw-bold">
                <i class="bi bi-arrow-counterclockwise me-1"></i> Return Policy
            </h6>
            <p class="mb-1"><strong>@Model.ReturnPolicyName</strong></p>
            <p class="small text-muted mb-1">@Model.ReturnPolicyDescription</p>
            <span class="badge bg-light text-dark border">Returnable within <strong>@Model.ReturnDays</strong> days</span>
        </div>
    </div>
}
else
{
    <div class="card mt-4 shadow-sm border-danger">
        <div class="card-body">
            <h6 class="text-danger fw-bold">
                <i class="bi bi-x-circle me-1"></i> Return Policy
            </h6>
            <p class="mb-0 text-muted">This product is <strong>not returnable</strong>.</p>
        </div>
    </div>
}
public ProductReturnPolicy? GetReturnPolicyByProductId(int productId)
{
    return _context.ProductReturnPolicies.FirstOrDefault(x => x.ProductId == productId);
}
