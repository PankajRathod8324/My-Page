1. View (Userpage.cshtml)
This view contains:

Sorting (Order ID, Date, Order Status)

Filtering (Date Range, Order Status)

Pagination (with filters retained)

html
Copy
Edit
@model PagedList.IPagedList<Order>
@using PagedList.Mvc

@{
    ViewBag.Title = "Orders";
}

<h2 class="mb-4">Orders</h2>

<!-- Filtering Form -->
<form method="get" class="d-flex align-items-center mb-3">
    <div class="me-3">
        <label for="startDate" class="form-label">Start Date:</label>
        <input type="date" id="startDate" name="startDate" value="@ViewBag.StartDate" class="form-control">
    </div>

    <div class="me-3">
        <label for="endDate" class="form-label">End Date:</label>
        <input type="date" id="endDate" name="endDate" value="@ViewBag.EndDate" class="form-control">
    </div>

    <div class="me-3">
        <label for="orderStatus" class="form-label">Order Status:</label>
        <select id="orderStatus" name="orderStatus" class="form-select">
            <option value="">All</option>
            <option value="Pending" selected="@(ViewBag.OrderStatus == "Pending")">Pending</option>
            <option value="Completed" selected="@(ViewBag.OrderStatus == "Completed")">Completed</option>
            <option value="Cancelled" selected="@(ViewBag.OrderStatus == "Cancelled")">Cancelled</option>
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Filter</button>
</form>

<!-- Orders Table -->
<table class="table table-bordered">
    <thead>
        <tr>
            <th>
                <a asp-action="Userpage" asp-route-sortBy="OrderId" asp-route-isAsc="@(ViewBag.SortBy == "OrderId" ? !ViewBag.IsAsc : true)"
                   asp-route-startDate="@ViewBag.StartDate" asp-route-endDate="@ViewBag.EndDate" asp-route-orderStatus="@ViewBag.OrderStatus">
                    #Order
                </a>
            </th>
            <th>
                <a asp-action="Userpage" asp-route-sortBy="Date" asp-route-isAsc="@(ViewBag.SortBy == "Date" ? !ViewBag.IsAsc : true)"
                   asp-route-startDate="@ViewBag.StartDate" asp-route-endDate="@ViewBag.EndDate" asp-route-orderStatus="@ViewBag.OrderStatus">
                    Date
                </a>
            </th>
            <th>
                <a asp-action="Userpage" asp-route-sortBy="OrderStatus" asp-route-isAsc="@(ViewBag.SortBy == "OrderStatus" ? !ViewBag.IsAsc : true)"
                   asp-route-startDate="@ViewBag.StartDate" asp-route-endDate="@ViewBag.EndDate" asp-route-orderStatus="@ViewBag.OrderStatus">
                    Status
                </a>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var order in Model)
        {
            <tr>
                <td>@order.OrderId</td>
                <td>@order.Date.ToString("yyyy-MM-dd")</td>
                <td>@order.OrderStatus</td>
            </tr>
        }
    </tbody>
</table>

<!-- Pagination -->
<div class="pagination-container">
    @Html.PagedListPager(Model, page => Url.Action("Userpage", new {
        page,
        pageSize = ViewBag.PageSize,
        sortBy = ViewBag.SortBy,
        isAsc = ViewBag.IsAsc,
        startDate = ViewBag.StartDate,
        endDate = ViewBag.EndDate,
        orderStatus = ViewBag.OrderStatus
    }), new PagedListRenderOptions { Display = PagedListDisplayMode.IfNeeded })
</div>
2. Controller (OrderController.cs)
Handles:

Sorting

Filtering (Date Range, Order Status)

Pagination

csharp
Copy
Edit
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using PagedList;
using YourNamespace.Models;
using YourNamespace.Services;

public class OrderController : Controller
{
    private readonly IOrderService _orderService;

    public OrderController(IOrderService orderService)
    {
        _orderService = orderService;
    }

    public IActionResult Userpage(string sortBy, bool isAsc = true, string startDate = null, string endDate = null, string orderStatus = null, int? page = 1, int? pageSize = 10)
    {
        var orders = _orderService.GetOrders(); // Fetch orders from service/repository

        // Filtering by date range
        if (!string.IsNullOrEmpty(startDate) && DateTime.TryParse(startDate, out DateTime start))
        {
            orders = orders.Where(o => o.Date >= start);
        }
        if (!string.IsNullOrEmpty(endDate) && DateTime.TryParse(endDate, out DateTime end))
        {
            orders = orders.Where(o => o.Date <= end);
        }

        // Filtering by status
        if (!string.IsNullOrEmpty(orderStatus))
        {
            orders = orders.Where(o => o.OrderStatus == orderStatus);
        }

        // Sorting
        orders = sortBy switch
        {
            "OrderId" => isAsc ? orders.OrderBy(o => o.OrderId) : orders.OrderByDescending(o => o.OrderId),
            "Date" => isAsc ? orders.OrderBy(o => o.Date) : orders.OrderByDescending(o => o.Date),
            "OrderStatus" => isAsc ? orders.OrderBy(o => o.OrderStatus) : orders.OrderByDescending(o => o.OrderStatus),
            _ => orders.OrderBy(o => o.Date) // Default sorting
        };

        // Pagination
        int pageNumber = page ?? 1;
        int itemsPerPage = pageSize ?? 10;
        var pagedOrders = orders.ToPagedList(pageNumber, itemsPerPage);

        // Pass sorting & filtering values to ViewBag
        ViewBag.SortBy = sortBy;
        ViewBag.IsAsc = isAsc;
        ViewBag.StartDate = startDate;
        ViewBag.EndDate = endDate;
        ViewBag.OrderStatus = orderStatus;
        ViewBag.PageSize = itemsPerPage;

        return View(pagedOrders);
    }
}
3. Service (OrderService.cs)
