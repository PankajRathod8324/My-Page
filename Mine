@{
    ViewBag.Title = "Payment";
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-lg border-0 rounded-3">
                <div class="card-header bg-primary text-white text-center py-3">
                    <h4 class="mb-0">Confirm Payment</h4>
                </div>
                <div class="card-body text-center">
                    <p class="text-muted">
                        You are about to pay <strong class="text-dark">₹@ViewBag.Amount</strong> for your order.
                    </p>
                    <button id="checkout-button" class="btn btn-primary btn-lg mt-4">
                        Proceed to Payment
                    </button>
                </div>
                <div class="card-footer text-center">
                    <p class="text-muted small mb-0">Powered by Stripe — Payment is 100% secure</p>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://js.stripe.com/v3/"></script>
<script>
    const stripe = Stripe('@ViewBag.StripePublishKey');

    document.getElementById("checkout-button").addEventListener("click", function () {
        fetch("/Payment/CreateCheckoutSession")
            .then(response => response.json())
            .then(session => stripe.redirectToCheckout({ sessionId: session.id }))
            .catch(error => {
                console.error("Error:", error);
                alert("Failed to initiate payment. Please try again.");
            });
    });
</script>
[HttpGet]
public IActionResult CreateCheckoutSession()
{
    StripeConfiguration.ApiKey = _configuration["Stripe:SecretKey"];

    decimal amount = Convert.ToDecimal(TempData["TotalAmount"]);
    TempData.Keep("TotalAmount");
    TempData.Keep("CartItems");
    TempData.Keep("PaymentMethod");

    var options = new SessionCreateOptions
    {
        PaymentMethodTypes = new List<string> { "card", "upi", "netbanking" },
        Mode = "payment",
        LineItems = new List<SessionLineItemOptions>
        {
            new SessionLineItemOptions
            {
                PriceData = new SessionLineItemPriceDataOptions
                {
                    Currency = "inr",
                    UnitAmount = (long)(amount * 100),
                    ProductData = new SessionLineItemPriceDataProductDataOptions
                    {
                        Name = "Order Payment"
                    },
                },
                Quantity = 1
            },
        },
        SuccessUrl = Url.Action("Success", "Payment", null, Request.Scheme),
        CancelUrl = Url.Action("Failed", "Payment", null, Request.Scheme),
    };

    var service = new SessionService();
    var session = service.Create(options);

    return Json(new { id = session.Id });
}
public async Task<IActionResult> Success()
{
    try
    {
        var amount = Convert.ToDecimal(TempData["TotalAmount"]);
        var cartItemsJson = TempData["CartItems"]?.ToString();
        var paymentMethod = TempData["PaymentMethod"]?.ToString();

        if (string.IsNullOrEmpty(cartItemsJson) || string.IsNullOrEmpty(paymentMethod))
        {
            // If TempData expired, redirect to cart
            return RedirectToAction("Index", "Cart");
        }

        var cartItems = System.Text.Json.JsonSerializer.Deserialize<List<CartItemDTO>>(cartItemsJson);

        var order = new OrderDTO
        {
            Price = amount,
            PaymentMethod = paymentMethod,
            CartItems = cartItems,
            StripeChargeId = "StripeHostedCheckout", // Or leave null / set later if using webhook
        };

        await _orderService.CreateOrderAsync(order);

        ViewBag.Message = "Your payment was successful, and your order has been placed!";
        return View();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Order creation error: {ex.Message}");
        // Optionally log the error using your logger
        return RedirectToAction("Failed");
    }
}
