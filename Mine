using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

public class EncryptionTool
{
    public static string Encrypt(string plainText, string key)
    {
        using var aes = Aes.Create();
        aes.Key = Encoding.UTF8.GetBytes(key);
        aes.GenerateIV();
        var iv = aes.IV;

        using var encryptor = aes.CreateEncryptor(aes.Key, iv);
        using var ms = new MemoryStream();
        using (var cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
        using (var writer = new StreamWriter(cs))
        {
            writer.Write(plainText);
        }

        var encrypted = ms.ToArray();
        var result = new byte[iv.Length + encrypted.Length];
        Buffer.BlockCopy(iv, 0, result, 0, iv.Length);
        Buffer.BlockCopy(encrypted, 0, result, iv.Length, encrypted.Length);

        return Convert.ToBase64String(result);
    }

    static void Main()
    {
        string key = "Your32CharEncryptionKey123456789012"; // Store this securely later
        string connectionString = "Server=.;Database=MyDb;User Id=myuser;Password=mypassword;";

        string encrypted = Encrypt(connectionString, key);
        Console.WriteLine("Encrypted Connection String:");
        Console.WriteLine(encrypted);
    }
}
[System.Environment]::SetEnvironmentVariable("ENC_KEY", "Your32CharEncryptionKey123456789012", "Machine")
dotnet add package Microsoft.Win32.Registry
using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

public static class EncryptionHelper
{
    public static string Decrypt(string cipherText, string key)
    {
        var fullCipher = Convert.FromBase64String(cipherText);

        using var aes = Aes.Create();
        aes.Key = Encoding.UTF8.GetBytes(key);

        var iv = new byte[aes.BlockSize / 8];
        var cipher = new byte[fullCipher.Length - iv.Length];

        Buffer.BlockCopy(fullCipher, 0, iv, 0, iv.Length);
        Buffer.BlockCopy(fullCipher, iv.Length, cipher, 0, cipher.Length);

        aes.IV = iv;

        using var decryptor = aes.CreateDecryptor(aes.Key, aes.IV);
        using var ms = new MemoryStream(cipher);
        using var cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read);
        using var reader = new StreamReader(cs);
        return reader.ReadToEnd();
    }
}
using Microsoft.Win32;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

// 1️⃣ Read encrypted connection string from Registry
string encryptedConnStr = Registry.GetValue(
    @"HKEY_LOCAL_MACHINE\SOFTWARE\MyApp\Secrets",
    "EncryptedConnectionString",
    null
)?.ToString();

if (string.IsNullOrEmpty(encryptedConnStr))
{
    throw new Exception("Encrypted connection string not found in registry.");
}

// 2️⃣ Read encryption key from environment variable
string encKey = Environment.GetEnvironmentVariable("ENC_KEY");

if (string.IsNullOrEmpty(encKey))
{
    throw new Exception("Encryption key not found in environment variables.");
}

// 3️⃣ Decrypt connection string
string decryptedConnStr = EncryptionHelper.Decrypt(encryptedConnStr, encKey);

// 4️⃣ Use it with EF Core
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(decryptedConnStr));

var app = builder.Build();

app.MapGet("/", () => "App is running with secure connection string.");
app.Run();
