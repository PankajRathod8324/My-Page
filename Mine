public IActionResult Index()
{
Â  Â  ViewBag.StripePublishKey = _configuration["Stripe:PublishableKey"];
Â  Â  ViewBag.Amount = TempData["TotalAmount"];
Â  Â  TempData.Keep("TotalAmount"); Â  // ðŸ‘ˆ This keeps the value for next request
Â  Â  TempData.Keep("CartItems"); Â  Â  // ðŸ‘ˆ Also keep CartItems for use in Charge
Â  Â  return View();
}
[HttpPost]
public async Task<IActionResult> Charge(string stripeToken)
{
Â  Â  string userId = User.FindFirstValue(ClaimTypes.NameIdentifier)!;

Â  Â  decimal amount = Convert.ToDecimal(TempData["TotalAmount"]);
Â  Â  var cartItemsJson = TempData["CartItems"]?.ToString();
Â  Â  var cartItems = System.Text.Json.JsonSerializer.Deserialize<List<CartItemDTO>>(cartItemsJson ?? "[]");

Â  Â  var (success, chargeId) = await _paymentService.ProcessToPaymentAsync(amount, stripeToken);

Â  Â  if (success)
Â  Â  {
Â  Â  Â  Â  await _orderService.CreateOrderAsync(userId, amount, chargeId, cartItems);
Â  Â  Â  Â  return RedirectToAction("Success");
Â  Â  }

Â  Â  return RedirectToAction("Failed");
}
