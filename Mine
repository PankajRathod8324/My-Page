using iText.Kernel.Pdf;
using iText.Layout;
using iText.Layout.Element;
using iText.Layout.Properties;
using iText.Kernel.Font;
using iText.IO.Font.Constants;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.IO;
using YourProject.Services;
using System.Threading.Tasks;

[Authorize(Roles = "User")]
public class BookingController : Controller
{
    private readonly IBookingService _bookingService;
    private readonly IUserService _userService;

    public BookingController(IBookingService bookingService, IUserService userService)
    {
        _bookingService = bookingService;
        _userService = userService;
    }

    [HttpGet]
    public async Task<IActionResult> DownloadAllBookingsPdf()
    {
        var userId = _userService.GetCurrentUserId(); // implement via IHttpContextAccessor or Claims
        var bookings = await _bookingService.GetBookingsByUserIdAsync(userId);

        if (bookings == null || !bookings.Any())
        {
            TempData["Error"] = "No bookings found to download.";
            return RedirectToAction("MyBookings");
        }

        using (var ms = new MemoryStream())
        {
            PdfWriter writer = new PdfWriter(ms);
            PdfDocument pdf = new PdfDocument(writer);
            Document document = new Document(pdf);

            PdfFont font = PdfFontFactory.CreateFont(StandardFonts.HELVETICA);
            document.SetFont(font);

            document.Add(new Paragraph("Your Bookings Summary")
                .SetFontSize(18)
                .SetBold()
                .SetTextAlignment(TextAlignment.CENTER)
                .SetMarginBottom(20));

            foreach (var booking in bookings)
            {
                Table table = new Table(2).UseAllAvailableWidth();
                table.AddCell(new Cell().Add(new Paragraph("Booking ID").SetBold()));
                table.AddCell(new Cell().Add(new Paragraph(booking.BookingId.ToString())));
                table.AddCell(new Cell().Add(new Paragraph("Event Name").SetBold()));
                table.AddCell(new Cell().Add(new Paragraph(booking.EventName)));
                table.AddCell(new Cell().Add(new Paragraph("Date & Time").SetBold()));
                table.AddCell(new Cell().Add(new Paragraph(booking.EventDateTime.ToString("dd-MM-yyyy hh:mm tt"))));
                table.AddCell(new Cell().Add(new Paragraph("Location").SetBold()));
                table.AddCell(new Cell().Add(new Paragraph(booking.EventLocation)));
                table.AddCell(new Cell().Add(new Paragraph("Seats Booked").SetBold()));
                table.AddCell(new Cell().Add(new Paragraph(booking.SeatsBooked.ToString())));
                table.AddCell(new Cell().Add(new Paragraph("Final Price").SetBold()));
                table.AddCell(new Cell().Add(new Paragraph("â‚¹" + booking.FinalPrice)));
                table.AddCell(new Cell().Add(new Paragraph("Status").SetBold()));
                table.AddCell(new Cell().Add(new Paragraph(booking.Status)));

                document.Add(table);
                document.Add(new Paragraph("\n"));
            }

            document.Close();
            byte[] pdfBytes = ms.ToArray();
            return File(pdfBytes, "application/pdf", "Your_Bookings.pdf");
        }
    }
}
