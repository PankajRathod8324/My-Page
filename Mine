Models/Product.cs
csharp
Copy code
public class Product
{
    public int Id { get; set; }
    public string Title { get; set; }
    public decimal Price { get; set; }
    public string Description { get; set; }
}
üìÑ ViewModels/ProductVM.cs
csharp
Copy code
public class ProductVM
{
    public int Id { get; set; }
    public string Title { get; set; }
    public decimal Price { get; set; }
    public string Description { get; set; }

    // These will be ignored if not found in the Model
    public string ExtraField1 { get; set; }
    public string ExtraField2 { get; set; }
}
üîÅ Helpers/ViewModelToModelMapper.cs
csharp
Copy code
public static class ViewModelToModelMapper
{
    public static TModel Map<TVM, TModel>(TVM viewModel)
        where TModel : class, new()
    {
        TModel model = new TModel();
        foreach (var vmProp in typeof(TVM).GetProperties())
        {
            var modelProp = typeof(TModel).GetProperty(vmProp.Name);
            if (modelProp != null && modelProp.CanWrite)
            {
                var value = vmProp.GetValue(viewModel);
                modelProp.SetValue(model, value);
            }
        }
        return model;
    }
}
üì¶ Repositories/IGenericRepository.cs
csharp
Copy code
public interface IGenericRepository<TModel> where TModel : class, new()
{
    void Add(TModel entity);
    TModel GetById(int id);
    void Update(TModel entity);
    void Delete(int id);
}
üì¶ Repositories/GenericRepository.cs
csharp
Copy code
public class GenericRepository<TModel> : IGenericRepository<TModel> where TModel : class, new()
{
    private static readonly List<TModel> _db = new(); // Simulated DB

    public void Add(TModel entity) => _db.Add(entity);

    public TModel GetById(int id)
    {
        var prop = typeof(TModel).GetProperty("Id");
        return _db.FirstOrDefault(x => (int)prop.GetValue(x) == id);
    }

    public void Update(TModel entity)
    {
        Delete((int)typeof(TModel).GetProperty("Id")?.GetValue(entity));
        Add(entity);
    }

    public void Delete(int id)
    {
        var prop = typeof(TModel).GetProperty("Id");
        var item = _db.FirstOrDefault(x => (int)prop.GetValue(x) == id);
        if (item != null)
            _db.Remove(item);
    }
}
üß† Services/IGenericService.cs
csharp
Copy code
public interface IGenericService
{
    void Add<TVM, TModel>(TVM viewModel)
        where TVM : class
        where TModel : class, new();
}
üß† Services/GenericService.cs
csharp
Copy code
public class GenericService : IGenericService
{
    public void Add<TVM, TModel>(TVM viewModel)
        where TVM : class
        where TModel : class, new()
    {
        var model = ViewModelToModelMapper.Map<TVM, TModel>(viewModel);
        var repo = new GenericRepository<TModel>();
        repo.Add(model);
    }
}
üåê Controllers/GenericController.cs
csharp
Copy code
[ApiController]
[Route("api/[controller]")]
public class GenericController : ControllerBase
{
    private readonly IGenericService _service;

    public GenericController(IGenericService service)
    {
        _service = service;
    }

    [HttpPost("add-user")]
    public IActionResult AddUser([FromBody] UserVM userVM)
    {
        _service.Add<UserVM, User>(userVM);
        return Ok("User added");
    }

    [HttpPost("add-product")]
    public IActionResult AddProduct([FromBody] ProductVM productVM)
    {
        _service.Add<ProductVM, Product>(productVM);
        return Ok("Product added");
    }
}
