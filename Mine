JavaScript (cart.js – dynamically calculate total & handle Place Order)
javascript
Copy code
function updateCartSummary() {
    let totalPrice = 0;
    let itemCount = 0;

    $(".cart-item").each(function () {
        const qty = parseInt($(this).find(".qty-input").val());
        const price = parseFloat($(this).find(".item-total").text().replace("₹", "").trim());
        itemCount += qty;
        totalPrice += price;
    });

    $(".summary-item-count").text(`Items (${itemCount})`);
    $(".summary-total-price").text(`₹${totalPrice}`);
}

$(document).on("input", ".qty-input", function () {
    const qty = parseInt($(this).val());
    const pricePerUnit = parseFloat($(this).closest(".cart-item").find("p.mb-1").text().replace("Price: ₹", "").trim());
    const newTotal = pricePerUnit * qty;
    $(this).closest(".cart-item").find(".item-total").text(`₹${newTotal}`);
    updateCartSummary();
});

$(document).on("click", ".finalsavebtn", function () {
    let cartItems = [];

    $(".cart-item").each(function () {
        const productId = $(this).find(".qty-input").data("itemid");
        const qty = parseInt($(this).find(".qty-input").val());

        cartItems.push({
            ProductId: productId,
            Quantity: qty
        });
    });

    $.ajax({
        type: "POST",
        url: "/Order/PlaceOrder",
        data: JSON.stringify({ CartItems: cartItems }),
        contentType: "application/json",
        success: function (response) {
            toastr.success("Order placed successfully!");
            // Optional: Redirect or refresh
        },
        error: function () {
            toastr.error("Error placing order.");
        }
    });
});
✅ ViewModel for Order
csharp
Copy code
public class CartItemVM
{
    public int ProductId { get; set; }
    public int Quantity { get; set; }
}

public class OrderRequestVM
{
    public List<CartItemVM> CartItems { get; set; }
}
✅ Controller
csharp
Copy code
public class OrderController : Controller
{
    private readonly IOrderService _orderService;

    public OrderController(IOrderService orderService)
    {
        _orderService = orderService;
    }

    [HttpPost]
    public IActionResult PlaceOrder([FromBody] OrderRequestVM orderRequest)
    {
        if (orderRequest == null || orderRequest.CartItems == null || !orderRequest.CartItems.Any())
            return BadRequest("No items to place order.");

        var result = _orderService.PlaceOrder(orderRequest.CartItems);

        if (result)
            return Ok(new { success = true });
        else
            return StatusCode(500, new { success = false, message = "Order failed" });
    }
}
✅ Service Layer
csharp
Copy code
public interface IOrderService
{
    bool PlaceOrder(List<CartItemVM> cartItems);
}

public class OrderService : IOrderService
{
    private readonly IOrderRepository _orderRepository;

    public OrderService(IOrderRepository orderRepository)
    {
        _orderRepository = orderRepository;
    }

    public bool PlaceOrder(List<CartItemVM> cartItems)
    {
        return _orderRepository.CreateOrder(cartItems);
    }
}
✅ Repository Layer
csharp
Copy code
public interface IOrderRepository
{
    bool CreateOrder(List<CartItemVM> cartItems);
}

public class OrderRepository : IOrderRepository
{
    private readonly AppDbContext _context;

    public OrderRepository(AppDbContext context)
    {
        _context = context;
    }

    public bool CreateOrder(List<CartItemVM> cartItems)
    {
        using var transaction = _context.Database.BeginTransaction();
        try
        {
            var order = new Order
            {
                OrderDate = DateTime.Now,
                TotalAmount = cartItems.Sum(x =>
                    _context.Products.First(p => p.ProductId == x.ProductId).Price * x.Quantity),
                Status = "Placed"
            };

            _context.Orders.Add(order);
            _context.SaveChanges();

            foreach (var item in cartItems)
            {
                var product = _context.Products.First(p => p.ProductId == item.ProductId);

                var orderItem = new OrderItem
                {
                    OrderId = order.OrderId,
                    ProductId = product.ProductId,
                    Quantity = item.Quantity,
                    Price = product.Price
                };

                _context.OrderItems.Add(orderItem);
            }

            _context.SaveChanges();
            transaction.Commit();
            return true;
        }
        catch (Exception)
        {
            transaction.Rollback();
            return false;
        }
    }
}
✅ Entity Sample
csharp
Copy code
public class Order
{
    public int OrderId { get; set; }
    public DateTime OrderDate { get; set; }
    public decimal TotalAmount { get; set; }
    public string Status { get; set; }

    public ICollection<OrderItem> OrderItems { get; set; }
}

public class OrderItem
{
    public int OrderItemId { get; set; }
    public int OrderId { get; set; }
    public int ProductId { get; set; }
    public int Quantity { get; set; }
    public decimal Price { get; set; }

    public Order Order { get; set; }
    public Product Product { get; set; }
}
✅ Lazy Load Items in Cart
You can apply IntersectionObserver or scroll event detection in JS to load more cart i
