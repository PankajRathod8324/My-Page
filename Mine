HTML + Slider UI
Put this above your product grid:

html
Copy code
<div class="container mb-4">
    <div class="row">
        <div class="col-md-12">
            <label for="priceRange" class="form-label fw-bold">Filter by Price</label>
            <input type="range" class="form-range" id="minPrice" min="0" max="10000" value="0">
            <input type="range" class="form-range" id="maxPrice" min="0" max="10000" value="10000">
            <div class="d-flex justify-content-between">
                <span>‚Çπ<span id="minValue">0</span></span>
                <span>‚Çπ<span id="maxValue">10000</span></span>
            </div>
        </div>
    </div>
</div>

<div id="productContainer" class="row">
    @await Html.PartialAsync("_ProductCardsPartial", Model)
</div>

<div id="loading" style="display:none;" class="text-center my-3">
    <span class="spinner-border text-primary"></span>
    <p>Loading...</p>
</div>
‚úÖ 2. üîÅ JavaScript for Range + AJAX
html
Copy code
@section Scripts {
    <script>
        const minSlider = document.getElementById("minPrice");
        const maxSlider = document.getElementById("maxPrice");
        const minVal = document.getElementById("minValue");
        const maxVal = document.getElementById("maxValue");

        // Update label values
        minSlider.oninput = maxSlider.oninput = function () {
            let min = parseInt(minSlider.value);
            let max = parseInt(maxSlider.value);

            if (min > max) {
                [min, max] = [max, min]; // Swap if min > max
            }

            minVal.innerText = min;
            maxVal.innerText = max;

            filterByPrice(min, max);
        };

        function filterByPrice(min, max) {
            $("#loading").show();
            $.ajax({
                url: '/Product/FilterByPrice',
                type: 'GET',
                data: { minPrice: min, maxPrice: max },
                success: function (result) {
                    $('#productContainer').html(result);
                    $("#loading").hide();
                },
                error: function () {
                    $('#productContainer').html('<p class="text-danger">Failed to load products.</p>');
                    $("#loading").hide();
                }
            });
        }
    </script>
}
‚úÖ 3. üß† Backend Controller (C#)
csharp
Copy code
public IActionResult FilterByPrice(decimal minPrice, decimal maxPrice)
{
    var products = _productService.GetProductsByPrice(minPrice, maxPrice);
    return PartialView("_ProductCardsPartial", products);
}
‚úÖ 4. üîÑ Service or Repository Layer
csharp
Copy code
public IEnumerable<ProductVM> GetProductsByPrice(decimal min, decimal max)
{
    return _context.Products
        .Where(p => p.Price >= min && p.Price <= max && p.Active)
        .OrderBy(p => p.Price)
        .Select(p => new ProductVM
        {
            Productid = p.Productid,
            Name = p.Name,
            Images = p.Images,
            CategoryName = p.Category.CategoryName,
            Price = p.Price
        }).ToList();
}
