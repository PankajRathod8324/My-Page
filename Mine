<div class="border d-flex col justify-content-center mb-3 p-3">
    <div class="file-upload d-flex align-items-center gap-2">
        <div id="previewContainer" class="d-flex gap-2 flex-wrap"></div>

        <div>
            <div>
                <label class="mt-2">Browse Files
                    <input type="file" id="fileInputAdd" name="Images" accept="image/*" multiple>
                </label>
            </div>
        </div>
    </div>
</div>
document.getElementById("fileInputAdd").addEventListener("change", function (event) {
    const files = event.target.files;
    const previewContainer = document.getElementById("previewContainer");
    previewContainer.innerHTML = ""; // Clear existing previews

    const validExtensions = ["image/jpeg", "image/png", "image/gif", "image/webp", "image/svg+xml"];

    for (let i = 0; i < files.length; i++) {
        const file = files[i];

        if (!validExtensions.includes(file.type)) {
            toastr.error(`${file.name} is not a valid image file.`);
            continue;
        }

        const reader = new FileReader();
        reader.onload = function (e) {
            const previewDiv = document.createElement("div");
            previewDiv.classList.add("image-preview");

            previewDiv.innerHTML = `
                <div style="position: relative;">
                    <img src="${e.target.result}" style="max-width: 100px; max-height: 100px; margin: 5px;">
                    <span class="remove-image" style="position:absolute;top:0;right:5px;cursor:pointer;color:red;font-size:18px;">&times;</span>
                </div>
            `;

            previewContainer.appendChild(previewDiv);

            // Remove image on click
            previewDiv.querySelector(".remove-image").addEventListener("click", () => {
                previewDiv.remove();
                // Optionally remove from FileList (advanced, requires DataTransfer)
            });
        };

        reader.readAsDataURL(file);
    }
});
$("#submitBtn").on("click", function (e) {
    e.preventDefault();

    const formData = new FormData();

    // Append text inputs
    formData.append("ProductName", $("#ProductName").val());
    formData.append("Description", $("#Description").val());

    // Append multiple files
    const files = document.getElementById("fileInputAdd").files;
    for (let i = 0; i < files.length; i++) {
        formData.append("Images", files[i]); // "Images" must match server-side parameter
    }

    $.ajax({
        url: '/Product/AddProduct',
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function (response) {
            toastr.success("Product added successfully!");
            // handle success
        },
        error: function (xhr) {
            toastr.error("Error while uploading.");
        }
    });
});
[HttpPost]
public async Task<IActionResult> AddProduct(string ProductName, string Description, List<IFormFile> Images)
{
    var product = new Product
    {
        Name = ProductName,
        Description = Description,
        // other fields...
    };
    _context.Products.Add(product);
    await _context.SaveChangesAsync();

    if (Images != null && Images.Count > 0)
    {
        foreach (var image in Images)
        {
            if (image.Length > 0)
            {
                var fileName = Guid.NewGuid() + Path.GetExtension(image.FileName);
                var path = Path.Combine("wwwroot/uploads", fileName);

                using (var stream = new FileStream(path, FileMode.Create))
                {
                    await image.CopyToAsync(stream);
                }

                var productImage = new ProductImage
                {
                    ProductId = product.ProductId,
                    ImagePath = "/uploads/" + fileName
                };

                _context.ProductImages.Add(productImage);
            }
        }

        await _context.SaveChangesAsync();
    }

    return Json(new { success = true });
}
