 $(document).on("click", ".ModifierCard", function () {
        var modId = $(this).data("modid");
        var groupId = $(this).data("groupid"); // Get Modifier Group Id
        var min = $(this).data('min');
        var max = $(this).data('max');
        let Highlight = true;

        const existingItemIndex = ItemDetailsArray.findIndex(item => item.ItemId === ItemIdTemp);

        if (existingItemIndex !== -1) {
            let existingModifiers = ItemDetailsArray[existingItemIndex].MenuItemModifier || [];

            // Group-wise selected count
            let groupModifiers = existingModifiers.filter(mod => mod.ModifierGroupId === groupId);

            if ($(this).hasClass("selected")) {
                // Remove from the array
                existingModifiers = existingModifiers.filter(mod => mod.ModifierId !== modId);
            } else {
                if (groupModifiers.length < max) {
                    // Add only if group limit not reached
                    existingModifiers.push({ ModifierId: modId, ModifierGroupId: groupId });
                } else {
                    Highlight = false;
                    toastr.warning("You can't select more than " + max + " options in this group.");
                }
            }

            // Remove duplicates
            const mergedModifiers = [];
            const ids = new Set();
            existingModifiers.forEach(mod => {
                if (!ids.has(mod.ModifierId)) {
                    ids.add(mod.ModifierId);
                    mergedModifiers.push(mod);
                }
            });

            ItemDetailsArray[existingItemIndex].MenuItemModifier = mergedModifiers;
        } else {
            // New item push
            ItemDetailsArray.push({
                ItemId: ItemIdTemp,
                MenuItemModifier: [{ ModifierId: modId, ModifierGroupId: groupId }]
            });
        }

        console.log(ItemDetailsArray);

        // Toggle styles only if allowed
        if (Highlight == true) {
            $(this).toggleClass("selected border-primary bg-primary-subtle");
            console.log("Highlight: " + Highlight);
        }
    });
    $(document).on("click", ".modifieraddbtn", function () {
        console.log(ItemIdTemp + "TempID");
        console.log(JSON.stringify(ItemDetailsArray.length));
        if (ItemDetailsArray.length == 0) {
            const existingItemIndex = ItemDetailsArray.findIndex(item => item.ItemId === ItemIdTemp);
            // New item push
            ItemDetailsArray.push({
                ItemId: ItemIdTemp,
                MenuItemModifier: []
            });
            console.log(ItemDetailsArray);

        }

        $.ajax({
            url: '@Url.Action("GetMenuItemDetails", "AccountManagerOrderApp")',
            type: "POST",
            data: JSON.stringify(ItemDetailsArray),
            contentType: 'application/json',
            success: function (response) {
                $("#modifierdatamodal").modal('hide');
                $("#orderitemomdifier").append(response);
                let total = 0;

                $(".ItemDataCard").each(function () {
                    let rate = parseFloat($(this).find('.itemrate').text()) || 0;
                    let modifierrate = parseFloat($(this).find('.modifierrate').text()) || 0;
                    total += (rate + modifierrate);
                });
                FinalSubtotalSum = total;
                console.log(FinalSubtotalSum + "Final Subtotal");
                $(".subtotal").text(total.toFixed(2));

                calculateTax();

                let finaltotal = 0;

                finaltotal = parseFloat((FinalSubtotalSum + FinalTaxSum)).toPrecision(5);
                $(".finaltotalamt")[0].innerHTML = parseFloat(finaltotal).toPrecision(5);
                selecteditem = [];
                selectedmodifier = [];
                ItemDetailsArray = [];
                FinalOrderSum = finaltotal;
                console.log(FinalOrderSum + "Final Total");
            },
            error: function (xhr, status, error) {
                console.error("Error fetching order details:", error);
            }
        });
    });
her i want to track what items that are append so make array which will track and if the same array like itemid and also same modifierid's is there that element is again add then give toaster that already exists
