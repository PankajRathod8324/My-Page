HTML: Simple Rounded Slider (No UI Lib)
Weâ€™ll use an <input type="range"> for both min and max values (simple and customizable).

html
Copy code
<div class="mb-3">
Â  Â  <label class="form-label fw-bold">Price Range (â‚¹)</label>
Â  Â  <div class="d-flex align-items-center gap-2">
Â  Â  Â  Â  <input type="range" class="form-range" id="minPrice" min="0" max="10000" step="100" value="0">
Â  Â  Â  Â  <input type="range" class="form-range" id="maxPrice" min="0" max="10000" step="100" value="10000">
Â  Â  </div>
Â  Â  <div class="d-flex justify-content-between mt-1">
Â  Â  Â  Â  <span>Min: â‚¹<span id="minValueText">0</span></span>
Â  Â  Â  Â  <span>Max: â‚¹<span id="maxValueText">10000</span></span>
Â  Â  </div>
</div>
âœ… 2. JavaScript (Access Min/Max & Trigger AJAX on .saveBtn)
html
Copy code
<script>
Â  Â  $(document).on("input", "#minPrice, #maxPrice", function () {
Â  Â  Â  Â  let min = parseInt($("#minPrice").val());
Â  Â  Â  Â  let max = parseInt($("#maxPrice").val());

Â  Â  Â  Â  if (min > max) {
Â  Â  Â  Â  Â  Â  // Swap if min exceeds max
Â  Â  Â  Â  Â  Â  [min, max] = [max, min];
Â  Â  Â  Â  }

Â  Â  Â  Â  $("#minValueText").text(min);
Â  Â  Â  Â  $("#maxValueText").text(max);
Â  Â  });

Â  Â  $(document).on("click", ".saveBtn", function (event) {
Â  Â  Â  Â  event.preventDefault();

Â  Â  Â  Â  var filter = $('#filter').val(); // category id or any filter
Â  Â  Â  Â  var search = $('#search').val(); // if you have a search input
Â  Â  Â  Â  var minPrice = parseInt($("#minPrice").val());
Â  Â  Â  Â  var maxPrice = parseInt($("#maxPrice").val());

Â  Â  Â  Â  let pageNumber = 1; // or maintain your current page state

Â  Â  Â  Â  $.ajax({
Â  Â  Â  Â  Â  Â  url: '/Product/FilteredList',
Â  Â  Â  Â  Â  Â  type: 'GET',
Â  Â  Â  Â  Â  Â  data: {
Â  Â  Â  Â  Â  Â  Â  Â  pageNumber: pageNumber,
Â  Â  Â  Â  Â  Â  Â  Â  pageSize: 10,
Â  Â  Â  Â  Â  Â  Â  Â  search: search,
Â  Â  Â  Â  Â  Â  Â  Â  filterBy: filter,
Â  Â  Â  Â  Â  Â  Â  Â  minPrice: minPrice,
Â  Â  Â  Â  Â  Â  Â  Â  maxPrice: maxPrice
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  success: function (result) {
Â  Â  Â  Â  Â  Â  Â  Â  $("#productContainer").html(result);
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  error: function () {
Â  Â  Â  Â  Â  Â  Â  Â  alert("Failed to load products.");
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  });
Â  Â  });
</script>
âœ… 3. Backend: Update PaginationOptions to Accept Min/Max
ðŸŸ¦ PaginationOptions.cs
csharp
Copy code
public class PaginationOptions
{
Â  Â  public int PageNumber { get; set; } = 1;
Â  Â  public int PageSize { get; set; } = 10;
Â  Â  public string? Search { get; set; }
Â  Â  public string? FilterBy { get; set; } // categoryId or any filter
Â  Â  public decimal? MinPrice { get; set; }
Â  Â  public decimal? MaxPrice { get; set; }
}
âœ… 4. Backend: Update GetFilteredProducts Method
ðŸŸ¦ ProductService.cs
csharp
Copy code
public IPagedList<ProductDTO> GetFilteredProducts(PaginationOptions filterOptions)
{
Â  Â  var products = _productRepository.GetAllProducts().AsQueryable();

Â  Â  if (!string.IsNullOrEmpty(filterOptions.Search))
Â  Â  {
Â  Â  Â  Â  string searchLower = filterOptions.Search.ToLower();
Â  Â  Â  Â  products = products.Where(u => u.Name.ToLower().Contains(searchLower));
Â  Â  }

Â  Â  if (!string.IsNullOrEmpty(filterOptions.FilterBy) &&
Â  Â  Â  Â  int.TryParse(filterOptions.FilterBy, out int categoryId))
Â  Â  {
Â  Â  Â  Â  products = products.Where(p => p.Categoryid == categoryId);
Â  Â  }

Â  Â  if (filterOptions.MinPrice.HasValue)
Â  Â  {
Â  Â  Â  Â  products = products.Where(p => p.Price >= filterOptions.MinPrice.Value);
Â  Â  }

Â  Â  if (filterOptions.MaxPrice.HasValue)
Â  Â  {
Â  Â  Â  Â  products = products.Where(p => p.Price <= filterOptions.MaxPrice.Value);
Â  Â  }

Â  Â  return products.ToPagedList(filterOptions.PageNumber, filterOptions.PageSize);
}
âœ… 5. Controller Endpo
