public class ServiceResult<T>
{
    public bool Success { get; set; }
    public string? Message { get; set; }
    public T? Data { get; set; }

    public static ServiceResult<T> SuccessResult(T data, string? message = null)
    {
        return new ServiceResult<T> { Success = true, Data = data, Message = message };
    }

    public static ServiceResult<T> Failure(string message)
    {
        return new ServiceResult<T> { Success = false, Message = message };
    }
}
public int AddProduct(Product product)
{
    _context.Products.Add(product);
    _context.SaveChanges();
    return product.ProductId; // Return newly generated ID
}
public ServiceResult<int> AddProduct(ProductDTO dto)
{
    if (string.IsNullOrEmpty(dto.Name))
        return ServiceResult<int>.Failure("Product name is required.");

    Product product = new Product
    {
        Name = dto.Name,
        Price = dto.Price,
        // map other fields
        IsReturnable = dto.IsReturnable,
        ReturnPolicyName = dto.IsReturnable ? dto.ReturnPolicyName : null,
        ReturnPolicyDescription = dto.IsReturnable ? dto.ReturnPolicyDescription : null,
        ReturnDays = dto.IsReturnable ? dto.ReturnDays : null,
    };

    int newId = _productRepository.AddProduct(product);

    return ServiceResult<int>.SuccessResult(newId, "Product added successfully.");
}
[HttpPost]
public IActionResult Add(ProductDTO model)
{
    var result = _productService.AddProduct(model);

    if (!result.Success)
    {
        return BadRequest(new { success = false, message = result.Message });
    }

    return Ok(new { success = true, productId = result.Data, message = result.Message });
}
[HttpPost]
public IActionResult Add(ProductDTO model)
{
    var result = _productService.AddProduct(model);

    if (!result.Success)
    {
        return BadRequest(new { success = false, message = result.Message });
    }

    return Ok(new { success = true, productId = result.Data, message = result.Message });
}
