#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>

using namespace std;

// 1. Find the Missing Number in an Array
int findMissingNumber(vector<int>& nums, int N) {
    int total = N * (N + 1) / 2; // Sum of first N natural numbers
    int sum = 0;
    for (int num : nums) sum += num;
    return total - sum;
}

// 2. String Compression
string compressString(const string& s) {
    string compressed = "";
    int count = 1;

    for (size_t i = 1; i <= s.length(); i++) {
        if (i < s.length() && s[i] == s[i - 1]) {
            count++;
        } else {
            compressed += s[i - 1] + to_string(count);
            count = 1;
        }
    }
    return compressed.length() < s.length() ? compressed : s;
}

// 3. Find Pairs with Given Sum in an Array
vector<pair<int, int>> findPairsWithSum(vector<int>& arr, int target) {
    unordered_set<int> seen;
    vector<pair<int, int>> result;

    for (int num : arr) {
        int complement = target - num;
        if (seen.find(complement) != seen.end()) {
            result.push_back({complement, num});
        }
        seen.insert(num);
    }
    return result;
}

// 4. Check if a String is a Valid Anagram
bool isAnagram(string s1, string s2) {
    if (s1.length() != s2.length()) return false;

    unordered_map<char, int> freq;
    for (char c : s1) freq[c]++;
    for (char c : s2) {
        if (--freq[c] < 0) return false;
    }
    return true;
}

// 5. Find First Non-Repeating Character in a String
char firstNonRepeatingChar(const string& s) {
    unordered_map<char, int> freq;
    for (char c : s) freq[c]++;
    
    for (char c : s) {
        if (freq[c] == 1) return c;
    }
    return '\0'; // Return null character if no non-repeating character exists
}

// 6. Find Majority Element in an Array (Boyer-Moore Voting Algorithm)
int findMajorityElement(vector<int>& nums) {
    int candidate = 0, count = 0;

    for (int num : nums) {
        if (count == 0) {
            candidate = num;
        }
        count += (num == candidate) ? 1 : -1;
    }

    // Verify if candidate is actually the majority element
    count = 0;
    for (int num : nums) {
        if (num == candidate) count++;
    }

    return (count > nums.size() / 2) ? candidate : -1; // Return -1 if no majority element exists
}

int main() {
    // Test case 1: Find Missing Number
    vector<int> nums1 = {1, 2, 4, 5, 6};
    cout << "Missing Number: " << findMissingNumber(nums1, 6) << endl;

    // Test case 2: String Compression
    string s = "aaabbcddddd";
    cout << "Compressed String: " << compressString(s) << endl;

    // Test case 3: Find Pairs with Given Sum
    vector<int> arr = {2, 7, 11, 15, -2, 4};
    int target = 9;
    vector<pair<int, int>> pairs = findPairsWithSum(arr, target);
    cout << "Pairs with Sum " << target << ": ";
    for (auto p : pairs) cout << "(" << p.first << ", " << p.second << ") ";
    cout << endl;

    // Test case 4: Check if Strings are Anagrams
    cout << "Are 'listen' and 'silent' anagrams? " << (isAnagram("listen", "silent") ? "Yes" : "No") << endl;

    // Test case 5: Find First Non-Repeating Character
    string str = "aabbcdeff";
    cout << "First Non-Repeating Character: " << firstNonRepeatingChar(str) << endl;

    // Test case 6: Find Majority Element
    vector<int> nums2 = {3, 3, 4, 2, 3, 3, 3, 1};
    cout << "Majority Element: " << findMajorityElement(nums2) << endl;

    return 0;
}
