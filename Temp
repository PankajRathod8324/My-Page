Here are the final files for your ASP.NET Core email sending feature, including fetching the logo from wwwroot, retrieving user details from the database, and using an HTML template for a professional look.

âœ… 1. Email Sending Logic (EmailService.cs)
Create a service to send emails.

ðŸ“Œ Location: Services/EmailService.cs

csharp
Copy code
using System;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Threading.Tasks;

public class EmailService
{
    private readonly IUserService _userService;  // Injected User Service
    private readonly IHttpContextAccessor _httpContextAccessor;

    public EmailService(IUserService userService, IHttpContextAccessor httpContextAccessor)
    {
        _userService = userService;
        _httpContextAccessor = httpContextAccessor;
    }

    public async Task SendResetEmailAsync(string email)
    {
        // Fetch user details from the database
        var user = _userService.GetUserByEmail(email);
        if (user == null) return; // Exit if user doesn't exist

        // Get the request context
        var request = _httpContextAccessor.HttpContext.Request;

        // Fetch logo URL dynamically from wwwroot
        var logoUrl = $"{request.Scheme}://{request.Host}/images/logo.png";

        // Load the email template from wwwroot
        string templatePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/templates/EmailTemplate.html");
        string emailBody = await File.ReadAllTextAsync(templatePath);

        // Generate reset link
        var resetLink = $"{request.Scheme}://{request.Host}/Authentication/Resetpasswordpage?email={email}";

        // Replace placeholders in the email template
        emailBody = emailBody.Replace("{{LOGO_URL}}", logoUrl)
                             .Replace("{{USERNAME}}", user.Name)  // Fetch username from DB
                             .Replace("{{EMAIL}}", user.Email)
                             .Replace("{{TEMP_PASSWORD}}", user.TempPassword)  // Fetch temp password
                             .Replace("{{RESET_LINK}}", resetLink)
                             .Replace("{{YEAR}}", DateTime.Now.Year.ToString());

        // Create the email message
        var message = new MailMessage
        {
            From = new MailAddress("test.dotnet@etatvasoft.com", "Your Company"),
            Subject = "Your Account Details",
            Body = emailBody,
            IsBodyHtml = true
        };
        message.To.Add(new MailAddress(email));

        // Configure SMTP client
        using (var smtp = new SmtpClient("mail.etatvasoft.com", 587))
        {
            smtp.EnableSsl = true;
            smtp.Credentials = new NetworkCredential("test.dotnet@etatvasoft.com", "P}N^{z-]7Ilp");
            await smtp.SendMailAsync(message);
        }
    }
}
âœ… 2. HTML Email Template (EmailTemplate.html)
ðŸ“Œ Location: wwwroot/templates/EmailTemplate.html

html
Copy code
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Welcome to Our Platform</title>
</head>
<body style="font-family: Arial, sans-serif; padding: 20px; background-color: #f4f4f4;">
    <div style="max-width: 600px; background: white; padding: 20px; border-radius: 5px; box-shadow: 0px 0px 10px #ccc;">
        <div style="text-align: center;">
            <img src="{{LOGO_URL}}" alt="Company Logo" style="width: 150px;">
            <h2>Welcome, {{USERNAME}}!</h2>
            <p>Your account has been created successfully.</p>
        </div>
        <hr>
        <p><strong>Email:</strong> {{EMAIL}}</p>
        <p><strong>Temporary Password:</strong> <span style="color: red;">{{TEMP_PASSWORD}}</span></p>
        <p>Please reset your password by clicking the button below:</p>
        <div style="text-align: center;">
            <a href="{{RESET_LINK}}" style="background: blue; color: white; padding: 10px 15px; text-decoration: none; border-radius: 5px;">
                Reset Your Password
            </a>
        </div>
        <p style="text-align: center; margin-top: 20px;">&copy; {{YEAR}} Your Company. All rights reserved.</p>
    </div>
</body>
</html>
âœ… 3. Calling SendResetEmailAsync from Controller
ðŸ“Œ Location: Controllers/UserController.cs

csharp
Copy code
[HttpPost]
public async Task<IActionResult> CreateUser(UserViewModel model)
{
    if (ModelState.IsValid)
    {
        var user = new User
        {
            Name = model.Name,
            Email = model.Email,
            TempPassword = GenerateTemporaryPassword() // Generate a random password
        };

        _userService.AddUser(user); // Save user in DB

        // Send email with login details
        await _emailService.SendResetEmailAsync(user.Email);

        return RedirectToAction("UserList");
    }
    return View(model);
}
âœ… 4. Register EmailService in Program.cs
ðŸ“Œ Location: Program.cs

csharp
Copy code
builder.Services.AddScoped<IUserService, UserService>(); // Register User Service
builder.Services.AddScoped<EmailService>(); // Register Email Service
builder.Services.AddHttpContextAccessor(); // Needed for generating URLs in email
âœ… Summary of Features
âœ” Fetch user details (email, name, temp password) from the database
âœ” Fetch logo dynamically from wwwroot
âœ” Use an HTML template for a beautiful email layout
âœ” Send emails via SMTP

âœ… Expected Email Output
ðŸ“© Subject: Your Account Details
ðŸ“¨ Body:

Includes Company Logo
Shows User Email & Temporary Password
Has a "Reset Password" Button
Displays Year (Dynamic)
This implementation ensures scalability, maintainability, and reus
