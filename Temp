Since you're working with ASP.NET Core MVC 7 and following a layered architecture, I'll guide you through adding a user with a profile photo using Microsoft SQL Server. The architecture consists of:

Presentation Layer (PL): Controllers and Views
Business Logic Layer (BLL): Services for handling logic
Data Access Layer (DAL): Repository and Entity Framework
Database Layer (DB): SQL Server
Step 1: Install Required Packages
Ensure you have the following packages installed via NuGet:

bash
Copy code
dotnet add package Microsoft.EntityFrameworkCore.SqlServer
dotnet add package Microsoft.EntityFrameworkCore.Tools
1. Data Layer (DAL)
UserModel.cs (Entity)
csharp
Copy code
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace YourNamespace.DAL.Models
{
    public class UserModel
    {
        [Key]
        public int Id { get; set; }

        [Required]
        [StringLength(100)]
        public string Name { get; set; }

        [Required]
        [StringLength(100)]
        [EmailAddress]
        public string Email { get; set; }

        public string ProfileImagePath { get; set; }
    }
}
AppDbContext.cs (Database Context)
csharp
Copy code
using Microsoft.EntityFrameworkCore;
using YourNamespace.DAL.Models;

namespace YourNamespace.DAL
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

        public DbSet<UserModel> Users { get; set; }
    }
}
IUserRepository.cs (Repository Interface)
csharp
Copy code
using YourNamespace.DAL.Models;

namespace YourNamespace.DAL.Repositories
{
    public interface IUserRepository
    {
        Task<UserModel> AddUserAsync(UserModel user);
        Task<IEnumerable<UserModel>> GetAllUsersAsync();
    }
}
UserRepository.cs (Repository Implementation)
csharp
Copy code
using Microsoft.EntityFrameworkCore;
using YourNamespace.DAL.Models;

namespace YourNamespace.DAL.Repositories
{
    public class UserRepository : IUserRepository
    {
        private readonly AppDbContext _context;

        public UserRepository(AppDbContext context)
        {
            _context = context;
        }

        public async Task<UserModel> AddUserAsync(UserModel user)
        {
            _context.Users.Add(user);
            await _context.SaveChangesAsync();
            return user;
        }

        public async Task<IEnumerable<UserModel>> GetAllUsersAsync()
        {
            return await _context.Users.ToListAsync();
        }
    }
}
2. Business Logic Layer (BLL)
IUserService.cs (Service Interface)
csharp
Copy code
using YourNamespace.DAL.Models;

namespace YourNamespace.BLL.Services
{
    public interface IUserService
    {
        Task<UserModel> AddUserAsync(UserModel user, IFormFile profileImage);
        Task<IEnumerable<UserModel>> GetAllUsersAsync();
    }
}
UserService.cs (Service Implementation)
csharp
Copy code
using YourNamespace.DAL.Models;
using YourNamespace.DAL.Repositories;
using Microsoft.AspNetCore.Http;
using System;
using System.IO;
using System.Threading.Tasks;

namespace YourNamespace.BLL.Services
{
    public class UserService : IUserService
    {
        private readonly IUserRepository _userRepository;
        private readonly string _imageFolderPath = "wwwroot/uploads/";

        public UserService(IUserRepository userRepository)
        {
            _userRepository = userRepository;
        }

        public async Task<UserModel> AddUserAsync(UserModel user, IFormFile profileImage)
        {
            if (profileImage != null)
            {
                var uniqueFileName = Guid.NewGuid().ToString() + "_" + profileImage.FileName;
                var filePath = Path.Combine(_imageFolderPath, uniqueFileName);

                Directory.CreateDirectory(_imageFolderPath); // Ensure directory exists

                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await profileImage.CopyToAsync(stream);
                }

                user.ProfileImagePath = "/uploads/" + uniqueFileName;
            }

            return await _userRepository.AddUserAsync(user);
        }

        public async Task<IEnumerable<UserModel>> GetAllUsersAsync()
        {
            return await _userRepository.GetAllUsersAsync();
        }
    }
}
3. Presentation Layer (PL)
UserController.cs (Controller)
csharp
Copy code
using Microsoft.AspNetCore.Mvc;
using YourNamespace.BLL.Services;
using YourNamespace.DAL.Models;
using System.Threading.Tasks;

namespace YourNamespace.PL.Controllers
{
    public class UserController : Controller
    {
        private readonly IUserService _userService;

        public UserController(IUserService userService)
        {
            _userService = userService;
        }

        [HttpGet]
        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        public async Task<IActionResult> Create(UserModel user, IFormFile profileImage)
        {
            if (ModelState.IsValid)
            {
                await _userService.AddUserAsync(user, profileImage);
                return RedirectToAction("Index");
            }
            return View(user);
        }

        [HttpGet]
        public async Task<IActionResult> Index()
        {
            var users = await _userService.GetAllUsersAsync();
            return View(users);
        }
    }
}
Views
Create.cshtml (User Form)
html
Copy code
@model YourNamespace.DAL.Models.UserModel

<form asp-action="Create" method="post" enctype="multipart/form-data">
    <div>
        <label>Name:</label>
        <input asp-for="Name" required />
    </div>

    <div>
        <label>Email:</label>
        <input asp-for="Email" type="email" required />
    </div>

    <div>
        <label>Profile Image:</label>
        <input type="file" name="profileImage" accept="image/*" />
    </div>

    <button type="submit">Save</button>
</form>
Index.cshtml (User List)
html
Copy code
@model IEnumerable<YourNamespace.DAL.Models.UserModel>

<table>
    <tr>
        <th>Name</th>
        <th>Email</th>
        <th>Profile Photo</th>
    </tr>
    @foreach (var user in Model)
    {
        <tr>
            <td>@user.Name</td>
            <td>@user.Email</td>
            <td>
                @if (!string.IsNullOrEmpty(user.ProfileImagePath))
                {
                    <img src="@user.ProfileImagePath" width="100" height="100" />
                }
            </td>
        </tr>
    }
</table>
4. Register Dependencies in Program.cs
csharp
Copy code
using YourNamespace.DAL;
using YourNamespace.DAL.Repositories;
using YourNamespace.BLL.Services;
using Microsoft.EntityFrameworkCore;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllersWithViews();
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddScoped<IUserRepository, UserRepository>();
builder.Services.AddScoped<IUserService, UserService>();

var app = builder.Build();

if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
}

app.UseStaticFiles();
app.UseRouting();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=User}/{action=Index}/{id?}");

app.Run();
5. Configure Database in appsettings.json
json
Copy code
"ConnectionStrings": {
    "DefaultConnection": "Server=YOUR_SERVER;Database=YourDatabase;Trusted_Connection=True;MultipleActiveResultSets=true"
}
6. Apply Migrations and Run
bash
Copy code
dotnet ef migrations add InitialCreate
dotnet ef database update
âœ… Now you can create users with a profile photo!
This follows layered architecture with a proper structure. Let me know if you need modifications!






