JSON data contains some fields that are strings but should be numbers or booleans. We need to properly convert them before saving to prevent errors like "string cannot be converted to System.Int32".

âœ… Fixed ASP.NET Controller Code
csharp
Copy code
[HttpPost]
public IActionResult AddMenuItem([FromBody] JsonObject menuItemData)
{
    try
    {
        if (menuItemData == null)
        {
            return BadRequest("Invalid JSON format. Could not parse data.");
        }

        Console.WriteLine("Raw JSON received: " + menuItemData.ToString());

        // Extract individual values safely
        string itemName = menuItemData["ItemName"]?.ToString();
        int categoryId = TryParseInt(menuItemData["CategoryId"]);
        int itemTypeId = TryParseInt(menuItemData["ItemtypeId"]);
        decimal rate = TryParseDecimal(menuItemData["Rate"]);
        int quantity = TryParseInt(menuItemData["Quantity"]);
        int unitId = TryParseInt(menuItemData["UnitId"]);
        bool isAvailable = TryParseBool(menuItemData["IsAvailable"]);
        decimal taxPercentage = TryParseDecimal(menuItemData["TaxPercentage"]);
        string shortCode = menuItemData["ShortCode"]?.ToString();
        string description = menuItemData["Description"]?.ToString();
        bool taxDefault = TryParseBool(menuItemData["TaxDefault"]);

        // Parse Modifier Groups JSON array safely
        List<ItemModifierGroup> modifierGroups = new List<ItemModifierGroup>();
        if (menuItemData.ContainsKey("ModifierGroupIdForAdd") && menuItemData["ModifierGroupIdForAdd"] != null)
        {
            modifierGroups = JsonConvert.DeserializeObject<List<ItemModifierGroup>>(menuItemData["ModifierGroupIdForAdd"].ToString());
        }

        Console.WriteLine($"Received Item Name: {itemName}");
        Console.WriteLine($"Modifier Groups: {string.Join(",", modifierGroups.Select(m => m.ModifierGroupId))}");

        // Step 1: Save Menu Item
        var menuitem = new MenuItem
        {
            CategoryId = categoryId,
            ItemName = itemName,
            ItemTypeId = itemTypeId,
            Rate = rate,
            Quantity = quantity,
            UnitId = unitId,
            IsAvailable = isAvailable,
            TaxPercentage = taxPercentage,
            ShortCode = shortCode,
            Description = description,
            TaxDefault = taxDefault
        };

        _menuService.AddMenuItem(menuitem);

        // Step 2: Save Modifier Groups (if present)
        if (modifierGroups.Any())
        {
            foreach (var modifierGroup in modifierGroups)
            {
                var menuitemmodifier = new ItemModifierGroup
                {
                    ItemId = menuitem.ItemId,
                    ModifierGroupId = modifierGroup.ModifierGroupId,
                    MinSelection = modifierGroup.MinSelection,
                    MaxSelection = modifierGroup.MaxSelection
                };

                _menuService.AddMenuItemModifierGroup(menuitemmodifier);
            }
        }

        return Json(new { success = true, message = "Menu Item Added Successfully!" });
    }
    catch (Exception ex)
    {
        Console.WriteLine("Error: " + ex.Message);
        return BadRequest($"Error: {ex.Message}");
    }
}
âœ… Helper Methods for Type Conversion
Since JSON properties are received as strings, we need helper methods to safely convert them to int, decimal, and bool:

csharp
Copy code
private int TryParseInt(object value)
{
    return int.TryParse(value?.ToString(), out int result) ? result : 0;
}

private decimal TryParseDecimal(object value)
{
    return decimal.TryParse(value?.ToString(), out decimal result) ? result : 0;
}

private bool TryParseBool(object value)
{
    return bool.TryParse(value?.ToString(), out bool result) ? result : false;
}
ðŸš€ Fixes Applied
âœ” Safely converts string-based numbers using helper methods (TryParseInt, TryParseDecimal)
âœ” Prevents null issues by providing default values (0 for numbers, false for booleans)
âœ” Properly deserializes ModifierGroupIdForAdd array

ðŸ“Œ Now, send this AJAX Request
javascript
Copy code
$.ajax({
    url: "/YourController/AddMenuItem",
    type: "POST",
    contentType: "application/json",
    data: JSON.stringify({
        CategoryId: "15",
        ItemName: "srfddfsdsfsdf",
        ItemtypeId: "1",
        Rate: "40",
        Quantity: "3",
        UnitId: "1",
        IsAvailable: "",
        TaxPercentage: "0",
        ShortCode: "",
        Description: "gfrgrffgfr",
        ModifierGroupId: "5",
        ModifierGroupName: "Toppings",
        MinSelection: "1",
        MaxSelection: "4",
        TaxDefault: "false",
        ModifierGroupIdForAdd: [
            { modifiergroupid: "5", minSelection: "1", maxSelection: "4" }
        ]
    }),
    success: function (response) {
        console.log("Success:", response);
    },
    error: function (xhr, status, error) {
        console.error("Error:", xhr.responseText);
    }
});
This will now correctly convert JSON values and add the menu item with mod
