public IActionResult GeneratePDF(int orderId)
    {
        var order = _orderService.GetOrderByOrderId(orderId);

        if (order == null)
        {
            TempData["Message"] = "Order not found!";
            return RedirectToAction("Dashboard");
        }

        // ✅ Render Razor View as HTML string
        string htmlContent = RenderRazorViewToString("OrderPDF", order);

        if (string.IsNullOrEmpty(htmlContent))
        {
            return Content("Error: Razor view rendering returned null.");
        }

        var pdfDoc = new HtmlToPdfDocument()
        {
            GlobalSettings = {
            ColorMode = ColorMode.Color,
            Orientation = Orientation.Portrait,
            PaperSize = PaperKind.A3,
            },
            Objects = {
            new ObjectSettings() {
                PagesCount = true,
                HtmlContent = htmlContent,
                WebSettings = { DefaultEncoding = "utf-8" },
                HeaderSettings = { FontName = "Arial", FontSize = 9, Right = "Page [page] of [toPage]", Line = true },
                FooterSettings = { FontName = "Arial", FontSize = 9, Line = true, Center = "Report Footer" }
            }
            }
        };

        HtmlToPdf converter = new HtmlToPdf();
        converter.Options.PdfPageSize = PdfPageSize.A4;
        converter.Options.PdfPageOrientation = PdfPageOrientation.Portrait;
        converter.Options.WebPageWidth = 1200;  // Increase width
        converter.Options.MarginLeft = 20;
        converter.Options.MarginRight = 20;


        SelectPdf.PdfDocument pdf = converter.ConvertHtmlString(htmlContent);

        // ✅ Save PDF to disk
        string folderPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "GeneratedPDFs");
        Directory.CreateDirectory(folderPath); // Ensure directory exists
        string filePath = Path.Combine(folderPath, $"Order_{orderId}.pdf");

        using (var memoryStream = new MemoryStream())
        {
            pdf.Save(memoryStream);
            pdf.Close();
            return File(memoryStream.ToArray(), "application/pdf", $"Order_{orderId}.pdf");
        }

    }

this is the controller and this is the view which i want to render in pdf @model DAL.ViewModel.OrderVM

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Order Invoice</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .container { width: 100%; padding: 20px; border: 1px solid #ddd; }
        h2 { text-align: center; color: #305059; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        table, th, td { border: 1px solid black; padding: 10px; text-align: left; }
        th { background-color: #88c3d3; }
        .text-center { text-align: center; }
        .text-right { text-align: right; }
        .custom-table thead {
    background-color: rgba(0, 102, 167, 1);; /* Dark background for header */
    color: white; /* White text */
}

.custom-table tbody tr {
    border-bottom: 2px solid rgb(159, 204, 231); /* Blue line after each row */
}

.total-amount {
    border-bottom: 2px solid rgb(159, 204, 231);
}

.custom-table th,
.custom-table td {
    border: none !important; /* Remove all box borders */
    padding: 10px; /* Add padding for better spacing */
}
    </style>
</head>
<body>
    <div class="container mt-4">
        
        <div class="d-flex align-items-center justify-content-center mb-4 mt-4">
                        <img class="me-2" src="~/assest/logos/pizzashop_logo.png" alt="Pizzashop Logo"
                            style="width: 60px;">
                        <div class="fs-3 fw-bold webybtn" >PIZZASHOP</div>

        </div>

        <div class="row">
            <div class="col">
                <span class="mt-4 webybtn fw-bold">Customer Details</span><br>
                <span>Name: @Model.CustomerName</span><br>
                <span>Mob. @Model.CustomerPhone</span>
            </div>
            <div class="col">
                 <span class="mt-4 webybtn fw-bold">Order Details</span><br>
                 <span>Invoice Number: @Model.InvoiceNo</span><br>
                 <span>Date: @Model.Date</span><br>
                <div id="table-container">
                @foreach (var table in Model.OrderTables)
                {
                    <span class="table-data" data-section="@table.SectionName" data-table="@table.TableName"></span>
                }
                </div>

                <!-- Placeholder for displaying grouped data -->
                <div id="grouped-tables"></div>
            </div>
        </div>

       
      
    <table class="table table-borderless custom-table">
    <thead class="">
        <tr>
            <th scope="col">Sr.No</th>
            <th scope="col">Item</th>
            <th scope="col">Quantity</th>
            <th scope="col">Price</th>
            <th scope="col">Total Amount</th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < Model.OrderItems.Count; i++)
        {
            <tr>
                <th>@(i + 1)</th>
                <td>
                    @Model.OrderItems[i].ItemName
                    @foreach (var modifier in Model.OrderItems[i].Modifiers)
                    {
                        <p class="ms-4">- @modifier.ModifierName</p>
                    }
                </td>
                <td>
                    @Model.OrderItems[i].Quantity
                    @foreach (var modifier in Model.OrderItems[i].Modifiers)
                    {
                        <p>@modifier.Quantity</p>
                    }
                </td>
                <td>
                    @Model.OrderItems[i].Price
                    @foreach (var modifier in Model.OrderItems[i].Modifiers)
                    {
                        <p>@modifier.ModifierRate</p>
                    }
                </td>
                <td>
                    @(Model.OrderItems[i].Quantity * Model.OrderItems[i].Price)
                    @foreach (var modifier in Model.OrderItems[i].Modifiers)
                    {
                        <p>@(modifier.Quantity * modifier.ModifierRate)</p>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

 <div class="row total-amount">
            <div class="col">
                <span class="mt-4 "></span><br>
                <span>SubTotal:  </span><br>
                 @foreach (var tax in Model.OrderTax)
                {
                    <span>@tax.TaxName:</span><br>
                }
                
            </div>
            <div class="col text-end justify-content-between mb-2">
                 <span class="mt-4 "</span><br>
                 <span>@Model.SubTotal</span><br>
                 @foreach(var tax in Model.OrderTax)
                 {
                    <span>@(tax.TaxTypeId == 1 ? tax.TaxAmount : (tax.TaxAmount * Model.SubTotal) / 100)</span><br>
                 }
            </div>
        </div>

        <div class="row mb-4">
            <div class="col">
                <span class=" "></span><br>
                <span class="webybtn fw-bold">Total Amount Due:  </span><br>
                 
                
            </div>
            <div class="col text-end justify-content-between ">
                 <span class=" "</span><br>
                 <span class="webybtn fw-bold" >@Model.TotalAmount</span><br>
            </div>
        </div>

        <div class="row ps-1 mb-5">
            <span class="webybtn fw-bold">Payment Information</span>
            <span>Payment Method: @Model.PaymentMode</span>
        </div>

        <div class="row text-center">
            <span class="webybtn fw-bold"> THANK YOU!!</span>
        </div>
    </div>

    
<script>
    document.addEventListener("DOMContentLoaded", function () {
        let tables = document.querySelectorAll(".table-data");
        let sectionMap = {};

        // Loop through all table elements
        tables.forEach(table => {
            let section = table.dataset.section;
            let tableNo = table.dataset.table;

            // Group tables by section
            if (!sectionMap[section]) {
                sectionMap[section] = [];
            }
            sectionMap[section].push(tableNo);
        });

        let outputHtml = "";
        for (let section in sectionMap) {
            outputHtml += `<span>Section: ${section}</span><br>`;
            outputHtml += `<span>Table No: ${sectionMap[section].join(", ")}</span><br>`;
        }

        document.getElementById("grouped-tables").innerHTML = outputHtml;
    });
</script>
</body>
</html> but the problrem is that the ere is only the html content is printing the csss boostrap evrything image is not printing so give me riviese code with updated
