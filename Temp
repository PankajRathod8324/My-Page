public DashboardMetricsDto GetSalesMetrics(string filter)
{
    var dateRange = GetDateRangeFromFilter(filter);
    return _orderRepository.GetMetricsByDateRange(dateRange.Start, dateRange.End);
}

private (DateTime Start, DateTime End) GetDateRangeFromFilter(string filter)
{
    DateTime today = DateTime.Today;
    return filter switch
    {
        "Today" => (today, today),
        "Last7Days" => (today.AddDays(-6), today),
        "AllTime" => (DateTime.MinValue, today),
        _ => (today, today)
    };
}
public DashboardMetricsDto GetMetricsByDateRange(DateTime startDate, DateTime endDate)
{
    var orders = _context.Orders
        .Where(o => o.OrderDate >= startDate && o.OrderDate <= endDate)
        .ToList();

    var totalSales = orders.Sum(o => o.TotalAmount);
    var totalOrders = orders.Count;
    var avgOrderValue = totalOrders > 0 ? totalSales / totalOrders : 0;

    return new DashboardMetricsDto
    {
        TotalSales = totalSales,
        TotalOrders = totalOrders,
        AvgOrderValue = avgOrderValue
    };
}
