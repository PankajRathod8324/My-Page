EditMenuItem Method
This method will fetch the item details and pass them to the view for editing.

csharp
Copy code
[Authorize(Policy = "MenuEditPolicy")]
public IActionResult EditMenuItem(int itemId)
{
    // Fetch Categories, Item Types, Units, and Modifier Groups
    ViewBag.Categories = _menuService.GetAllCategories()
        .Select(r => new SelectListItem { Value = r.CategoryId.ToString(), Text = r.CategoryName })
        .ToList();

    ViewBag.Itemtypes = _menuService.GetAllItemTypes()
        .Select(r => new SelectListItem { Value = r.ItemtypeId.ToString(), Text = r.ItemType1 })
        .ToList();

    ViewBag.Units = _menuService.GetAllUnits()
        .Select(r => new SelectListItem { Value = r.UnitId.ToString(), Text = r.UnitName })
        .ToList();

    ViewBag.ModifierGroups = _menuService.GetAllModifierGroups()
        .Select(r => new SelectListItem { Value = r.ModifierGroupId.ToString(), Text = r.ModifierGroupName })
        .ToList();

    // Fetch Item Data
    var item = _menuService.GetItemById(itemId);
    if (item == null)
    {
        return NotFound(); // Return a 404 if the item doesn't exist
    }

    // Fetch associated modifier groups
    var itemModifiers = _menuService.GetItemModifierGroups(item.ItemId);

    var itemvm = new MenuCategoryVM
    {
        ItemId = item.ItemId,
        CategoryId = item.CategoryId,
        ItemName = item.ItemName,
        ItemtypeId = item.ItemtypeId,
        Rate = item.Rate,
        Quantity = item.Quantity,
        UnitId = item.UnitId,
        IsAvailable = item.IsAvailable ?? false,
        TaxDefault = item.TaxDefault,
        TaxPercentage = item.TaxPercentage,
        ShortCode = item.ShortCode,
        Description = item.Description,
        ModifierGroupId = item.ModifierGroupId,
        ModifierGroups = itemModifiers.Select(m => new ModifierGroupVM
        {
            ModifierGroupId = m.ModifierGroupId,
            MinSelection = m.MinSelection,
            MaxSelection = m.MaxSelection
        }).ToList()
    };

    return PartialView("_EditItemPV", itemvm);
}
‚úÖ 2Ô∏è‚É£ Create the View Model
Create a view model to hold data when editing an item.

csharp
Copy code
public class MenuCategoryVM
{
    public int ItemId { get; set; }
    public int? CategoryId { get; set; }
    public string ItemName { get; set; }
    public int? ItemtypeId { get; set; }
    public decimal Rate { get; set; }
    public int Quantity { get; set; }
    public int? UnitId { get; set; }
    public bool IsAvailable { get; set; }
    public bool TaxDefault { get; set; }
    public decimal? TaxPercentage { get; set; }
    public string ShortCode { get; set; }
    public string Description { get; set; }
    public int? ModifierGroupId { get; set; }
    public List<ModifierGroupVM> ModifierGroups { get; set; }
}

public class ModifierGroupVM
{
    public int ModifierGroupId { get; set; }
    public int MinSelection { get; set; }
    public int MaxSelection { get; set; }
}
‚úÖ 3Ô∏è‚É£ Create _EditItemPV.cshtml Partial View
This is the edit form where users can modify menu item details.

html
Copy code
@model MenuCategoryVM

<div class="modal-header">
    <h5 class="modal-title">Edit Menu Item</h5>
    <button type="button" class="close" data-dismiss="modal">&times;</button>
</div>

<div class="modal-body">
    <form id="editMenuItemForm">
        <input type="hidden" asp-for="ItemId" />

        <div class="form-group">
            <label>Item Name</label>
            <input type="text" class="form-control" asp-for="ItemName" required />
        </div>

        <div class="form-group">
            <label>Category</label>
            <select class="form-control" asp-for="CategoryId" asp-items="ViewBag.Categories"></select>
        </div>

        <div class="form-group">
            <label>Rate</label>
            <input type="number" class="form-control" asp-for="Rate" required />
        </div>

        <div class="form-group">
            <label>Quantity</label>
            <input type="number" class="form-control" asp-for="Quantity" required />
        </div>

        <div class="form-group">
            <label>Unit</label>
            <select class="form-control" asp-for="UnitId" asp-items="ViewBag.Units"></select>
        </div>

        <div class="form-group">
            <label>Is Available</label>
            <input type="checkbox" asp-for="IsAvailable" />
        </div>

        <div class="form-group">
            <label>Tax Percentage</label>
            <input type="number" class="form-control" asp-for="TaxPercentage" />
        </div>

        <div class="form-group">
            <label>Description</label>
            <textarea class="form-control" asp-for="Description"></textarea>
        </div>

        <div class="form-group">
            <label>Modifier Groups</label>
            <select multiple class="form-control" asp-for="ModifierGroupId" asp-items="ViewBag.ModifierGroups"></select>
        </div>

        <button type="submit" class="btn btn-primary">Save Changes</button>
    </form>
</div>
‚úÖ 4Ô∏è‚É£ Implement UpdateMenuItem Controller
This method updates the menu item with new details.

csharp
Copy code
[HttpPost]
[Authorize(Policy = "MenuEditPolicy")]
public IActionResult UpdateMenuItem([FromBody] MenuCategoryVM model)
{
    try
    {
        if (model == null)
        {
            return BadRequest("Invalid data");
        }

        var existingItem = _menuService.GetItemById(model.ItemId);
        if (existingItem == null)
        {
            return NotFound("Menu item not found");
        }

        // Update menu item
        existingItem.CategoryId = model.CategoryId;
        existingItem.ItemName = model.ItemName;
        existingItem.ItemtypeId = model.ItemtypeId;
        existingItem.Rate = model.Rate;
        existingItem.Quantity = model.Quantity;
        existingItem.UnitId = model.UnitId;
        existingItem.IsAvailable = model.IsAvailable;
        existingItem.TaxPercentage = model.TaxPercentage;
        existingItem.ShortCode = model.ShortCode;
        existingItem.Description = model.Description;
        existingItem.TaxDefault = model.TaxDefault;

        _menuService.UpdateMenuItem(existingItem);

        return Json(new { success = true, message = "Menu Item Updated Successfully!" });
    }
    catch (Exception ex)
    {
        return BadRequest($"Error: {ex.Message}");
    }
}
‚úÖ 5Ô∏è‚É£ AJAX Request to Save Changes
javascript
Copy code
$(document).ready(function () {
    $("#editMenuItemForm").submit(function (event) {
        event.preventDefault();

        var formData = {
            ItemId: $("#ItemId").val(),
            ItemName: $("#ItemName").val(),
            CategoryId: $("#CategoryId").val(),
            Rate: $("#Rate").val(),
            Quantity: $("#Quantity").val(),
            UnitId: $("#UnitId").val(),
            IsAvailable: $("#IsAvailable").prop("checked"),
            TaxPercentage: $("#TaxPercentage").val(),
            Description: $("#Description").val(),
            ModifierGroupId: $("#ModifierGroupId").val()
        };

        $.ajax({
            url: "/YourController/UpdateMenuItem",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(formData),
            success: function (response) {
                alert(response.message);
                location.reload();
            },
            error: function (xhr) {
                alert("Error: " + xhr.responseText);
            }
        });
    });
});
üöÄ Summary
‚úî Edit Form to Modify Menu Item
‚úî AJAX for Updating Data
