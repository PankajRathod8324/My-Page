it! Below is a Role-Based Permission Management System in ASP.NET MVC with:

Models: Role, Permission, RolePermission, User, UserRole
ViewModel: For handling permissions in UI
Repository: For database operations
Service Layer: Business logic
Controller: Handling API requests
Views: Managing roles & permissions
1. Database Schema (Entity Framework - Code First)
Models
Role Model
csharp
Copy code
public class Role
{
    public int Id { get; set; }
    public string Name { get; set; }
    public virtual ICollection<RolePermission> RolePermissions { get; set; }
    public virtual ICollection<UserRole> UserRoles { get; set; }
}
Permission Model
csharp
Copy code
public class Permission
{
    public int Id { get; set; }
    public string Name { get; set; }
}
RolePermission Model
csharp
Copy code
public class RolePermission
{
    public int Id { get; set; }
    public int RoleId { get; set; }
    public virtual Role Role { get; set; }
    public int PermissionId { get; set; }
    public virtual Permission Permission { get; set; }
    public bool CanView { get; set; }
    public bool CanEdit { get; set; }
    public bool CanDelete { get; set; }
}
User Model
csharp
Copy code
public class User
{
    public int Id { get; set; }
    public string Username { get; set; }
    public virtual ICollection<UserRole> UserRoles { get; set; }
}
UserRole Model
csharp
Copy code
public class UserRole
{
    public int Id { get; set; }
    public int UserId { get; set; }
    public virtual User User { get; set; }
    public int RoleId { get; set; }
    public virtual Role Role { get; set; }
}
2. ViewModel for Managing Permissions
csharp
Copy code
public class RolePermissionViewModel
{
    public int RoleId { get; set; }
    public string RoleName { get; set; }
    public List<PermissionViewModel> Permissions { get; set; }
}

public class PermissionViewModel
{
    public int PermissionId { get; set; }
    public string PermissionName { get; set; }
    public bool CanView { get; set; }
    public bool CanEdit { get; set; }
    public bool CanDelete { get; set; }
}
3. Repository Pattern
RolePermission Repository
csharp
Copy code
public interface IRolePermissionRepository
{
    Task<List<RolePermission>> GetPermissionsByRoleAsync(int roleId);
    Task UpdatePermissionsAsync(int roleId, List<RolePermission> rolePermissions);
}

public class RolePermissionRepository : IRolePermissionRepository
{
    private readonly AppDbContext _context;

    public RolePermissionRepository(AppDbContext context)
    {
        _context = context;
    }

    public async Task<List<RolePermission>> GetPermissionsByRoleAsync(int roleId)
    {
        return await _context.RolePermissions
            .Where(rp => rp.RoleId == roleId)
            .Include(rp => rp.Permission)
            .ToListAsync();
    }

    public async Task UpdatePermissionsAsync(int roleId, List<RolePermission> rolePermissions)
    {
        var existingPermissions = _context.RolePermissions.Where(rp => rp.RoleId == roleId);
        _context.RolePermissions.RemoveRange(existingPermissions);
        await _context.RolePermissions.AddRangeAsync(rolePermissions);
        await _context.SaveChangesAsync();
    }
}
4. Service Layer
csharp
Copy code
public interface IRolePermissionService
{
    Task<RolePermissionViewModel> GetPermissionsForRoleAsync(int roleId);
    Task UpdateRolePermissionsAsync(int roleId, RolePermissionViewModel model);
}

public class RolePermissionService : IRolePermissionService
{
    private readonly IRolePermissionRepository _repository;

    public RolePermissionService(IRolePermissionRepository repository)
    {
        _repository = repository;
    }

    public async Task<RolePermissionViewModel> GetPermissionsForRoleAsync(int roleId)
    {
        var rolePermissions = await _repository.GetPermissionsByRoleAsync(roleId);
        var viewModel = new RolePermissionViewModel
        {
            RoleId = roleId,
            RoleName = rolePermissions.FirstOrDefault()?.Role?.Name,
            Permissions = rolePermissions.Select(rp => new PermissionViewModel
            {
                PermissionId = rp.PermissionId,
                PermissionName = rp.Permission.Name,
                CanView = rp.CanView,
                CanEdit = rp.CanEdit,
                CanDelete = rp.CanDelete
            }).ToList()
        };

        return viewModel;
    }

    public async Task UpdateRolePermissionsAsync(int roleId, RolePermissionViewModel model)
    {
        var rolePermissions = model.Permissions.Select(p => new RolePermission
        {
            RoleId = roleId,
            PermissionId = p.PermissionId,
            CanView = p.CanView,
            CanEdit = p.CanEdit,
            CanDelete = p.CanDelete
        }).ToList();

        await _repository.UpdatePermissionsAsync(roleId, rolePermissions);
    }
}
5. Controller (RolePermissionsController)
csharp
Copy code
public class RolePermissionsController : Controller
{
    private readonly IRolePermissionService _service;

    public RolePermissionsController(IRolePermissionService service)
    {
        _service = service;
    }

    [HttpGet]
    public async Task<IActionResult> Edit(int roleId)
    {
        var model = await _service.GetPermissionsForRoleAsync(roleId);
        return View(model);
    }

    [HttpPost]
    public async Task<IActionResult> Edit(RolePermissionViewModel model)
    {
        await _service.UpdateRolePermissionsAsync(model.RoleId, model);
        return RedirectToAction("Index", "Roles");
    }
}
6. Database Configuration (EF Core)
csharp
Copy code
public class AppDbContext : DbContext
{
    public DbSet<Role> Roles { get; set; }
    public DbSet<Permission> Permissions { get; set; }
    public DbSet<RolePermission> RolePermissions { get; set; }
    public DbSet<User> Users { get; set; }
    public DbSet<UserRole> UserRoles { get; set; }

    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<RolePermission>()
            .HasOne(rp => rp.Role)
            .WithMany(r => r.RolePermissions)
            .HasForeignKey(rp => rp.RoleId);

        modelBuilder.Entity<RolePermission>()
            .HasOne(rp => rp.Permission)
            .WithMany()
            .HasForeignKey(rp => rp.PermissionId);

        modelBuilder.Entity<UserRole>()
            .HasOne(ur => ur.User)
            .WithMany(u => u.UserRoles)
            .HasForeignKey(ur => ur.UserId);

        modelBuilder.Entity<UserRole>()
            .HasOne(ur => ur.Role)
            .WithMany()
            .HasForeignKey(ur => ur.RoleId);
    }
}
7. View (Edit.cshtml - Razor)
html
Copy code
@model RolePermissionViewModel

<h2>Manage Permissions for @Model.RoleName</h2>

<form asp-action="Edit">
    <input type="hidden" asp-for="RoleId" />

    <table>
        <thead>
            <tr>
                <th>Permission</th>
                <th>View</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Permissions.Count; i++)
            {
                <tr>
                    <td>@Model.Permissions[i].PermissionName</td>
                    <td><input type="checkbox" asp-for="Permissions[i].CanView" /></td>
                    <td><input type="checkbox" asp-for="Permissions[i].CanEdit" /></td>
                    <td><input type="checkbox" asp-for="Permissions[i].CanDelete" /></td>
                </tr>
            }
        </tbody>
    </table>

    <button type="submit">Save</button>
</form>
Conclusion
MVC pattern followed
Role-based permission management
EF Core for database interaction
Repository & Service layers for clean code
Dynamic permission UI with checkboxes





