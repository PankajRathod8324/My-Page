NuGet Package
bash
Copy code
dotnet add package Select.HtmlToPdf.NetCore
‚úÖ Convert HTML to PDF in Controller
csharp
Copy code
using Microsoft.AspNetCore.Mvc;
using SelectPdf;
using System.IO;

public class OrderController : Controller
{
    public IActionResult GeneratePDF(int orderId)
    {
        string htmlContent = "<h1>Order #" + orderId + "</h1><p>Thank you for your order!</p>";

        HtmlToPdf converter = new HtmlToPdf();
        PdfDocument pdfDoc = converter.ConvertHtmlString(htmlContent);

        using (MemoryStream stream = new MemoryStream())
        {
            pdfDoc.Save(stream);
            pdfDoc.Close();
            return File(stream.ToArray(), "application/pdf", $"Order_{orderId}.pdf");
        }
    }
}
2Ô∏è‚É£ Using IronPdf (Easy, but Paid)
IronPdf is powerful but requires a license (free trial available).

‚úÖ Install NuGet Package
bash
Copy code
dotnet add package IronPdf
‚úÖ Convert HTML to PDF in Controller
csharp
Copy code
using Microsoft.AspNetCore.Mvc;
using IronPdf;
using System.IO;

public class OrderController : Controller
{
    public IActionResult GeneratePDF(int orderId)
    {
        string htmlContent = "<h1>Order #" + orderId + "</h1><p>Thank you for your order!</p>";

        var Renderer = new ChromePdfRenderer();
        var pdfDoc = Renderer.RenderHtmlAsPdf(htmlContent);

        return File(pdfDoc.BinaryData, "application/pdf", $"Order_{orderId}.pdf");
    }
}
3Ô∏è‚É£ Using PuppeteerSharp (Headless Chrome)
Puppeteer uses Google Chrome to render HTML and save it as PDF.

‚úÖ Install NuGet Package
bash
Copy code
dotnet add package PuppeteerSharp
‚úÖ Convert HTML to PDF in Controller
csharp
Copy code
using Microsoft.AspNetCore.Mvc;
using PuppeteerSharp;
using System.IO;
using System.Threading.Tasks;

public class OrderController : Controller
{
    public async Task<IActionResult> GeneratePDF(int orderId)
    {
        string htmlContent = "<h1>Order #" + orderId + "</h1><p>Thank you for your order!</p>";

        await new BrowserFetcher().DownloadAsync(BrowserFetcher.DefaultRevision);
        using var browser = await Puppeteer.LaunchAsync(new LaunchOptions { Headless = true });
        using var page = await browser.NewPageAsync();
        await page.SetContentAsync(htmlContent);
        byte[] pdf = await page.PdfDataAsync();

        return File(pdf, "application/pdf", $"Order_{orderId}.pdf");
    }
}
üîπ Which One Should You Choose?
Method	Pros	Cons
SelectPdf ‚úÖ	Simple & lightweight	Free version has watermark
IronPdf üöÄ	High-quality rendering	Paid after trial
PuppeteerSharp üåç	Uses real Chrome rendering	Requires downloading Chrome
Final Recommendati
