hold data for each permission, including role ID and checkbox states.

csharp
Copy code
public class RolePermissionViewModel
{
    public int RoleId { get; set; }
    public int PermissionId { get; set; }
    public string PermissionName { get; set; }
    public bool CanView { get; set; }
    public bool CanEdit { get; set; }
    public bool CanDelete { get; set; }
}
2️⃣ Controller (RolePermissionController.cs)
Handles retrieving and updating permissions.

csharp
Copy code
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

public class RolePermissionController : Controller
{
    private readonly IRolePermissionService _rolePermissionService;

    public RolePermissionController(IRolePermissionService rolePermissionService)
    {
        _rolePermissionService = rolePermissionService;
    }

    // GET: Load Permissions for a Role
    public async Task<IActionResult> ManagePermissions(int roleId)
    {
        var permissions = await _rolePermissionService.GetPermissionsByRoleId(roleId);
        return View(permissions);
    }

    // POST: Update permissions (called via AJAX)
    [HttpPost]
    public async Task<IActionResult> UpdatePermissions([FromBody] List<RolePermissionViewModel> permissions)
    {
        if (permissions == null || permissions.Count == 0)
        {
            return BadRequest("No permissions received");
        }

        bool success = await _rolePermissionService.UpdateRolePermissions(permissions);
        return success ? Ok("Permissions updated successfully") : StatusCode(500, "Failed to update permissions");
    }
}
3️⃣ Service Layer (RolePermissionService.cs)
Handles business logic before updating the repository.

Service Interface (IRolePermissionService.cs)
csharp
Copy code
using System.Collections.Generic;
using System.Threading.Tasks;

public interface IRolePermissionService
{
    Task<List<RolePermissionViewModel>> GetPermissionsByRoleId(int roleId);
    Task<bool> UpdateRolePermissions(List<RolePermissionViewModel> permissions);
}
Service Implementation (RolePermissionService.cs)
csharp
Copy code
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public class RolePermissionService : IRolePermissionService
{
    private readonly IRolePermissionRepository _rolePermissionRepository;

    public RolePermissionService(IRolePermissionRepository rolePermissionRepository)
    {
        _rolePermissionRepository = rolePermissionRepository;
    }

    public async Task<List<RolePermissionViewModel>> GetPermissionsByRoleId(int roleId)
    {
        return await _rolePermissionRepository.GetPermissionsByRoleId(roleId);
    }

    public async Task<bool> UpdateRolePermissions(List<RolePermissionViewModel> permissions)
    {
        return await _rolePermissionRepository.UpdateRolePermissions(permissions);
    }
}
4️⃣ Repository Layer (RolePermissionRepository.cs)
Handles database operations using Entity Framework.

Repository Interface (IRolePermissionRepository.cs)
csharp
Copy code
using System.Collections.Generic;
using System.Threading.Tasks;

public interface IRolePermissionRepository
{
    Task<List<RolePermissionViewModel>> GetPermissionsByRoleId(int roleId);
    Task<bool> UpdateRolePermissions(List<RolePermissionViewModel> permissions);
}
Repository Implementation (RolePermissionRepository.cs)
csharp
Copy code
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

public class RolePermissionRepository : IRolePermissionRepository
{
    private readonly ApplicationDbContext _context;

    public RolePermissionRepository(ApplicationDbContext context)
    {
        _context = context;
    }

    public async Task<List<RolePermissionViewModel>> GetPermissionsByRoleId(int roleId)
    {
        return await _context.RolePermissions
            .Where(rp => rp.RoleId == roleId)
            .Select(rp => new RolePermissionViewModel
            {
                RoleId = rp.RoleId,
                PermissionId = rp.PermissionId,
                PermissionName = rp.Permission.Name,
                CanView = rp.CanView,
                CanEdit = rp.CanEdit,
                CanDelete = rp.CanDelete
            })
            .ToListAsync();
    }

    public async Task<bool> UpdateRolePermissions(List<RolePermissionViewModel> permissions)
    {
        foreach (var perm in permissions)
        {
            var entity = await _context.RolePermissions
                .FirstOrDefaultAsync(rp => rp.RoleId == perm.RoleId && rp.PermissionId == perm.PermissionId);

            if (entity != null)
            {
                entity.CanView = perm.CanView;
                entity.CanEdit = perm.CanEdit;
                entity.CanDelete = perm.CanDelete;
            }
        }

        return await _context.SaveChangesAsync() > 0;
    }
}
5️⃣ View (ManagePermissions.cshtml)
This renders checkboxes and sends updates via AJAX.

html
Copy code
@model List<RolePermissionViewModel>

<table>
    <thead>
        <tr>
            <th>Permission</th>
            <th><input type="checkbox" id="selectAllView"> Can View</th>
            <th><input type="checkbox" id="selectAllEdit"> Can Edit</th>
            <th><input type="checkbox" id="selectAllDelete"> Can Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var permission in Model)
        {
            <tr>
                <td>@permission.PermissionName</td>
                <td><input type="checkbox" class="canView" data-id="@permission.PermissionId" @(permission.CanView ? "checked" : "")></td>
                <td><input type="checkbox" class="canEdit" data-id="@permission.PermissionId" @(permission.CanEdit ? "checked" : "")></td>
                <td><input type="checkbox" class="canDelete" data-id="@permission.PermissionId" @(permission.CanDelete ? "checked" : "")></td>
            </tr>
        }
    </tbody>
</table>

<script>
    function updatePermissions() {
        let permissions = [];

        $("tbody tr").each(function () {
            let permissionId = $(this).find(".canView").data("id");
            let canView = $(this).find(".canView").is(":checked");
            let canEdit = $(this).find(".canEdit").is(":checked");
            let canDelete = $(this).find(".canDelete").is(":checked");

            permissions.push({ PermissionId: permissionId, CanView: canView, CanEdit: canEdit, CanDelete: canDelete });
        });

        $.ajax({
            url: "/RolePermission/UpdatePermissions",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(permissions),
            success: function (response) {
                alert(response);
            },
            error: function () {
                alert("Error updating permissions");
            }
        });
    }

    $(".canView, .canEdit, .canDelete").change(updatePermissions);
</script>
Summary:
ViewModel: Holds role and permission data.
Controller: Handles permission retrieval and update.
Service Layer: Implements business logic.
Repository Layer: Uses EF Core to update database.
View: Renders checkboxes and updates permissions via AJAX.
This ensures that role-based permissions are correctly stored and updated dynamically.

Let me know if you need any modifications!
