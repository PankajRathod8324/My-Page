public List<OrderVM> GetOrderCategoryItem(int categoryId, string? status)
{
    var orders = _accountmanagerorderapprepository.GetOrderCategoryItem(categoryId);

    var orderVms = orders.Select(o => new OrderVM
    {
        OrderId = o.OrderId,
        OccupiedTime = DateTime.UtcNow - o.CreatedAt,
        OrderInstruction = o.OrderInstructions,

        OrderItems = _accountmanagerorderapprepository.GetOrderItemsByOrderId(o.OrderId)
            .Where(oi => oi.ItemId != 0 &&
                ((status == "In Progress" && (oi.Quantity - oi.Readyitemquantity) > 0) ||
                 (status != "In Progress" && oi.Readyitemquantity > 0)))
            .Select(oi => new OrderItemVM
            {
                ItemId = (int)oi.ItemId,
                ItemName = oi.ItemId.HasValue ? _menuRepository.GetItemNameById((int)oi.ItemId) : "No Item",
                Price = oi.Rate,
                Quantity = (status == "In Progress") ? (oi.Quantity - oi.Readyitemquantity) : oi.Readyitemquantity,
                ItemInstructions = oi.ItemInstructions,
                Status = status,
                Modifiers = oi.OrderModifiers.Select(om => new OrderModifierVM
                {
                    ModifierId = (int)om.ModifierId,
                    ModifierName = om.ModifierId.HasValue ? _menuRepository.GetModifierNameById((int)om.ModifierId) : "No Modifier",
                    ModifierRate = om.ModifierId.HasValue ? _menuRepository.GetModifierPriceById((int)om.ModifierId) : 0m,
                    Quantity = 1
                }).ToList()
            }).ToList(),

        CustomerTables = _accountmanagerorderapprepository.GetTablesByCustomerId((int)o.CustomerId).Select(ct => new CustomerTableVM
        {
            TableId = (int)ct.TableId,
            TableName = ct.TableId.HasValue ? _tableRepository.GetTableNameByTableId((int)ct.TableId) ?? "No Table" : "No Table",
            SectionName = ct.TableId.HasValue ? _tableRepository.GetSectionNameByTableId((int)ct.TableId) : "No Section"
        }).ToList()

    }).Where(o => o.OrderItems.Count > 0).ToList();

    return orderVms;
}
CREATE OR REPLACE FUNCTION get_orders_by_category(p_category_id INT)
RETURNS TABLE (
    order_id INT,
    created_at TIMESTAMP,
    order_instructions TEXT,
    customer_id INT
)
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        o.order_id,
        o.created_at,
        o.order_instructions,
        o.customer_id
    FROM orders o
    WHERE o.order_status_id NOT IN (3, 4)
      AND (
          p_category_id = 0 OR EXISTS (
              SELECT 1 FROM order_items oi
              WHERE oi.order_id = o.order_id
                AND oi.category_id = p_category_id
          )
      );
END;
$$ LANGUAGE plpgsql;
public List<Order> GetOrderCategoryItem(int categoryId)
{
    return _context.Orders
        .FromSqlRaw("SELECT * FROM get_orders_by_category({0})", categoryId)
        .ToList();
}
