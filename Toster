Implement AJAX for Filtering, Sorting, and Searching Without Page Refresh
Currently, your entire page reloads when searching, filtering, or sorting. To fix this, we will:

Use AJAX to send search, filter, and sorting requests
Use a Partial View to update only the table
Modify the Controller to return a Partial View for AJAX requests
ðŸš€ Steps to Implement AJAX-Based Searching, Filtering & Sorting
1. Modify Controller (MenuController.cs)
Modify the Index action to return a Partial View when an AJAX request is detected.

csharp
Copy code
public IActionResult Index(string search, string filterBy, int? pageSize, int? page)
{
    int currentPage = page ?? 1;
    int currentPageSize = pageSize ?? 10;

    // Fetch all units
    var unitList = db.Units.ToList();

    // Fetch & Filter Items
    var itemsQuery = db.MenuItems.AsQueryable();

    if (!string.IsNullOrEmpty(search))
    {
        itemsQuery = itemsQuery.Where(m => m.ItemName.Contains(search));
    }

    if (!string.IsNullOrEmpty(filterBy))
    {
        itemsQuery = itemsQuery.Where(m => m.Availability == filterBy);
    }

    var paginatedItems = itemsQuery
        .Select(item => new MenuItem
        {
            ItemId = item.ItemId,
            ItemName = item.ItemName,
            UnitId = item.UnitId,
            UnitName = unitList.FirstOrDefault(u => u.UnitId == item.UnitId)?.UnitName
        })
        .ToPagedList(currentPage, currentPageSize);

    var itemvm = new MenuCategoryVM
    {
        menuItems = paginatedItems
    };

    // Return Partial View if AJAX request
    if (Request.Headers["X-Requested-With"] == "XMLHttpRequest")
    {
        return PartialView("_MenuItemsPartial", itemvm);
    }

    return View(itemvm);
}
2. Create Partial View (_MenuItemsPartial.cshtml)
This only contains the table to be updated dynamically.

html
Copy code
@model DAL.ViewModel.MenuCategoryVM

<table class="table table-striped">
    <thead>
        <tr>
            <th>Item Name</th>
            <th>Unit Name</th>
            <th>Availability</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.menuItems)
        {
            <tr>
                <td>@item.ItemName</td>
                <td>@item.UnitName</td>
                <td>@item.Availability</td>
            </tr>
        }
    </tbody>
</table>

<!-- AJAX Pagination (Works with AJAX) -->
@Html.PagedListPager(Model.menuItems, page => "javascript:loadData('" + page + "')")
3. Modify Your Main View (Index.cshtml)
Modify your search, filter, and sorting controls to trigger AJAX.

html
Copy code
@model DAL.ViewModel.MenuCategoryVM

<!-- Search & Filter Form -->
<div class="row d-flex mb-2 align-items-center justify-content-center">
    <div class="col">
        <h1>Items</h1>
    </div>
    <div class="col-5 d-flex align-items-center gap-3 justify-content-end">
        <input class="form-control" type="text" id="searchBox" placeholder="Search by Item Name">
        <select id="filterBy" class="form-select">
            <option value="">All Items</option>
            <option value="Available">Available</option>
            <option value="Not Available">Not Available</option>
        </select>
        <select id="pageSize" class="form-select">
            <option value="5">5</option>
            <option value="10" selected>10</option>
            <option value="15">15</option>
        </select>
        <button type="button" id="searchButton" class="btn btn-primary">Search</button>
    </div>
</div>

<!-- Container for Table (Partial View) -->
<div id="menuItemsContainer">
    @Html.Partial("_MenuItemsPartial", Model)
</div>

<!-- AJAX Script -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Trigger AJAX search, filter, or sorting
        $("#searchButton, #filterBy, #pageSize").on("change click", function () {
            loadData(1);
        });

        // Function to load data via AJAX
        function loadData(page) {
            var searchTerm = $("#searchBox").val();
            var filterBy = $("#filterBy").val();
            var pageSize = $("#pageSize").val();

            $.ajax({
                url: '@Url.Action("Index", "Menu")',
                type: 'GET',
                data: { search: searchTerm, filterBy: filterBy, pageSize: pageSize, page: page },
                success: function (data) {
                    $("#menuItemsContainer").html(data); // Update partial view
                }
            });
        }
    });
</script>
âœ… Final Outcome
Table updates dynamically without reloading the page.
Search, Filter, and Sorting work with AJAX.
Pagination updates via AJAX instead of a full page refresh.
Now, your searching, filtering, sorting, and pagination work smoothly without reloading the page! ðŸš€
